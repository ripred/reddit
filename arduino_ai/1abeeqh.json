{
  "approved_at_utc": null,
  "subreddit": "Arduino_AI",
  "selftext": "This code plays music on a regular speaker by sending data(port.write(number)) to the port from a Processing program. However, when attempting to use DFPlayer instead of the  **melody\\_play(3)** section at the end of the code, the audio doesn't play even when writing code as follows. What could be the reason for this, and how can it be corrected?\n\n    #include &lt;SoftwareSerial.h&gt;\n    //Pin Assign\n    #define BT_RX 6\n    #define BT_TX 7\n    #define DP_LED 2\n    #define SP 5\n    #define SW 4\n    //Constant Value\n    #define BAUDRATE 115200\n    //Getting raw data\n    #define period 100 //measurement period\n    #define ST 1000 //\u8a08\u6e2c\u4ee5\u5916\u3067\u306e\u5f85\u3061\u6642\u9593\u306e\u8a2d\u5b9a setting of waiting time (besides measuring)\n    #define Vcc 5.0 //\u96fb\u5727\u5024\u21d2\u5727\u529b\u5024\u3067\u4f7f\u7528 voltage value \u21d2 used at pressure value\n    #define Rm 1.0 //\u96fb\u5727\u5024\u21d2\u5727\u529b\u5024\u3067\u4f7f\u7528 voltage value \u21d2 used at pressure value\n    #include \"SoftwareSerial.h\"\n    #include \"DFRobotDFPlayerMini.h\"\n    // Use pins 2 and 3 to communicate with DFPlayer Mini\n    static const uint8_t PIN_MP3_TX = 2; // Connects to module's RX\n    static const uint8_t PIN_MP3_RX = 3; // Connects to module's TX\n    SoftwareSerial softwareSerial(PIN_MP3_RX, PIN_MP3_TX);\n    SoftwareSerial mySerial(BT_RX,BT_TX);\n    // Create the Player object\n    DFRobotDFPlayerMini myDFplayer;\n    //Software Serial class\n    //--\u8ffd\u52a0\u90e8\u5206------------------------\n    //Valiable\n    int melo[8][24];\n    int wait[8][24];\n    unsigned long melody_millis = 0;\n    int melody_count = 0;\n    int melody_flag = -1;\n    //-----------------------------------\n    //Time management\n    unsigned long time_now = 0; //time in which the measurement is done\n    int Count = 0; //\u8a08\u6e2c\u7d42\u4e86\u7528\u306e\u30ab\u30a6\u30f3\u30c8 count for measuring termination (in case of pressing the button twice by accident)\n    int APin_F = 0; //Analogread\u5727\u529b\u5024\u5165\u529b pressure value input\n    int APin_ax, APin_ay, APin_az; //Analogread\u52a0\u901f\u5ea6\u5165\u529b x axis acceleration input\n    float F_Vout, Rfsr; //Used for calculate force\n    float ax_row, ay_row, az_row; //Acceleration [G]\n    //------\u8ffd\u52a0\u90e8\u5206-----------------------------\n    void melody_init(){\n    //Melody Setup\n    int i,j;//temporary(\u4eee\u306e\uff0c\u4e00\u6642\u7684\u306e)\n    //initialize valiable(\u5909\u6570\u306e\u521d\u671f\u5316)\n    for(i = 0;i &lt; 8;i++){\n    for(j = 0;j &lt; 24;j++){\n    melo[i][j] = -1;//-1 is no define(-1\u306f\u5b9a\u7fa9\u3057\u306a\u3044)\n    wait[i][j] = -1;//-1 is no define\n    }\n    }\n    }\n    void melody_setup(){\n    //\u3053\u306e\u95a2\u6570\u3067\u4f5c\u66f2\u3057\u307e\u3059\u3002\n    //\u73fe\u72b68\u66f2\u767b\u9332\u53ef\u80fd\u30671\u66f2\u3042\u305f\u308a16\u97f3(\u4f11\u7b26\u542b)\u9cf4\u3089\u305b\u307e\u3059\n    //melody_set(\u66f2\u756a\u53f7,\u5468\u6ce2\u6570[Hz],\u9cf4\u3089\u3059\u6642\u9593[ms])\u3067\u3059(\u5468\u6ce2\u6570\u30920\u306b\u3059\u308b\u3068\u4f11\u7b26)\n    //melody_play(\u66f2\u756a\u53f7)\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9cf4\u3089\u305b\u307e\u3059\u3002\n    //\u4f8b\u3068\u3057\u3066\u3001\u66f2\u756a\u53f70\u756a\u306b\u30a8\u30ea\u30fc\u30bc\u30011\u756a\u306b\u4eba\u751f\u306e\u30e1\u30ea\u30fc\u30b4\u30fc\u30e9\u30f3\u30c9\u3092\u767b\u9332\u3057\u3066\u307e\u3059\n    //\u5468\u6ce2\u6570\u3092\u767b\u9332\u3059\u308b\u3068\u304d\u306fmelo_freq(\u30aa\u30af\u30bf\u30fc\u30d6[],\u97f3\u7a0b(\u5927\u6587\u5b57\u3067\u534a\u97f3))\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\n    //melo_freq(0,'a');\u3060\u3068440Hz(\u57fa\u6e96\u30d4\u30c3\u30c1\u306eA)\n    //\u66f2\u756a\u53f70\u756a\u3000\u30de\u30ea\u30aa1up\u30006\u97f3\n    melody_set(0,melo_freq(1,'e'),150);//1\u97f3\u76ee\n    melody_set(0,melo_freq(1,'g'),150);//2\u97f3\u76ee\n    melody_set(0,melo_freq(2,'e'),150);//3\u97f3\u76ee\n    melody_set(0,melo_freq(2,'c'),150);//4\u97f3\u76ee\n    melody_set(0,melo_freq(2,'d'),150);//5\u97f3\u76ee\n    melody_set(0,melo_freq(2,'g'),150);//6\u97f3\u76ee\n    //\u66f2\u756a\u53f71\u756a\u3000\u4eba\u751f\u306e\u30e1\u30ea\u30fc\u30b4\u30fc\u30e9\u30f3\u30c9 22\u97f3\n    melody_set(1,melo_freq(0,'d'),250);//1\u97f3\u76ee\n    melody_set(1,melo_freq(0,'g'),250);//2\u97f3\u76ee\n    melody_set(1,melo_freq(1,'A'),250);//3\u97f3\u76ee\n    melody_set(1,melo_freq(1,'d'),350);//4\u97f3\u76ee\n    melody_set(1,0,50);//5\u97f3\u76ee(\u4f11\u7b26)\n    melody_set(1,melo_freq(1,'d'),250);//6\u97f3\u76ee\n    melody_set(1,melo_freq(1,'c'),250);//7\u97f3\u76ee\n    melody_set(1,melo_freq(1,'A'),250);//8\u97f3\u76ee\n    melody_set(1,melo_freq(1,'a'),250);//9\u97f3\u76ee\n    melody_set(1,melo_freq(1,'A'),750);//10\u97f3\u76ee\n    melody_set(1,melo_freq(0,'g'),250);\n    melody_set(1,melo_freq(1,'A'),250);\n    melody_set(1,melo_freq(1,'d'),250);\n    melody_set(1,melo_freq(1,'g'),350);\n    melody_set(1,0,50);//15\u97f3\u76ee(\u4f11\u7b26)\n    melody_set(1,melo_freq(1,'g'),250);\n    melody_set(1,0,10);//15\u97f3\u76ee(\u4f11\u7b26)\n    melody_set(1,melo_freq(1,'g'),250);\n    melody_set(1,melo_freq(2,'a'),250);\n    melody_set(1,melo_freq(1,'f'),100);\n    melody_set(1,melo_freq(1,'D'),100);\n    melody_set(1,melo_freq(1,'f'),500);\n    //\u66f2\u756a\u53f72\u756a\u3000\u30de\u30ea\u30aa\u306e\u30b3\u30a4\u30f3\u97f3 2\u97f3\n    melody_set(2,melo_freq(2,'b'),100);\n    melody_set(2,melo_freq(2,'e'),300);\n    //\u66f2\u756a\u53f73\u756a\u3000\u8d77\u52d5\u97f3 1\u97f3\n    melody_set(3,melo_freq(1,'f'),50);\n    //\u66f2\u756a\u53f74\u756a\u3000\u5207\u308a\u51fa\u3057\u97f3 2\u97f3\n    melody_set(4,melo_freq(1,'c'),100);\n    melody_set(4,melo_freq(1,'d'),100);\n    }\n    void melody_set(int i,int freq,int de){\n    //melody setup\n    int temp;//temporary\n    for(temp = 0;temp &lt; 24;temp++){\n    if(melo[i][temp] == -1){//serch no define\n    melo[i][temp] = freq;//freqency set\n    wait[i][temp] = de;//delay set\n    break;//getout \"for\"\n    }\n    }\n    }\n    void melody_play(int num){\n    melody_count = 0;\n    melody_flag = num;\n    }\n    void melody_seqence(){\n    if(melody_flag &gt;= 0){\n    //\u66f2\u756a\u53f7\u3092\u6307\u5b9a\u3055\u308c\u305f\u3089\n    if(melody_count == 0){\n    //\u97f3\u697d\u306e\u982d\u306e\u5834\u5408\n    tone(SP,melo[melody_flag][melody_count]);\n    melody_millis = millis();\n    melody_count++;\n    }\n    if(melody_millis + wait[melody_flag][melody_count - 1] &lt; millis()){\n    //\u3082\u3057\u97f3\u3092\u9cf4\u3089\u3059\u6642\u9593\u3092\u6e80\u4e86\u3057\u305f\u3089\n    if(melody_count == 24){\n    //\u6700\u5927\u97f3\u6570\u307e\u3067\u5230\u9054\u3057\u3066\u305f\u3089\u7121\u7406\u3084\u308a\u518d\u751f\u7d42\u4e86\n    noTone(SP);\n    melody_flag = -1;\n    melody_count = 0;\n    }else{\n    //\u6700\u5927\u97f3\u6570\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u97f3\u3092\u9cf4\u3089\u3059\n    if(melo[melody_flag][melody_count] == -1){\n    //\u3082\u3057\u975e\u767b\u9332\u3060\u3063\u305f\u5834\u5408\u306f\u518d\u751f\u4fee\u4e86\n    noTone(SP);\n    melody_flag = -1;\n    melody_count = 0;\n    }else if(melo[melody_flag][melody_count] == 0){\n    //\u7121\u97f3\u306a\u3089\u97f3\u306e\u505c\u6b62\u51e6\u7406\u3057\u3066\u518d\u751f\u7d99\u7d9a\n    noTone(SP);\n    melody_millis = millis();\n    melody_count++;\n    }else{\n    //\u767b\u9332\u3055\u308c\u3066\u3044\u308c\u3070\u305d\u306e\u97f3\u3092\u518d\u751f\n    tone(SP,melo[melody_flag][melody_count]);\n    melody_millis = millis();\n    melody_count++;\n    }\n    }\n    }\n    }\n    }\n    int melo_freq(byte octave,char amp){\n    int temp = 12 * octave;\n    if(amp == 'c'){\n    temp += 3;\n    }else if(amp == 'C'){\n    temp += 4;\n    }else if(amp == 'd'){\n    temp += 5;\n    }else if(amp == 'D'){\n    temp += 6;\n    }else if(amp == 'e'){\n    temp += 7;\n    }else if(amp == 'f'){\n    temp += 8;\n    }else if(amp == 'F'){\n    temp += 9;\n    }else if(amp == 'g'){\n    temp += 10;\n    }else if(amp == 'G'){\n    temp += 11;\n    }else if(amp == 'a'){\n    temp += 0;\n    }else if(amp == 'A'){\n    temp += 1;\n    }else if(amp == 'b'){\n    temp += 2;\n    }\n    float freq = 440.0 * pow(2.0,(temp/12.0));\n    return((int)freq);\n    }\n    //-------------------------------------------------------------------------------\n    void setup() {\n    //Serial settings\n    Serial.begin(BAUDRATE);//USB serial\n    mySerial.begin(BAUDRATE);//Bluetooth serial\n    //pin settings\n    pinMode(SW,INPUT_PULLUP);//Button\n    pinMode(DP_LED,OUTPUT);//LED output\n    pinMode(SS,OUTPUT);//SPI SSpin output\n    pinMode(SP,OUTPUT);//Speaker pin output\n    //End of setup\n    melody_init();//Melody init\n    melody_setup();//Melody setting\n    melody_play(3);\n    }\n    void loop() {\n    //\u30b9\u30a4\u30c3\u30c1\u4f55\u3066\u6709\u308b\u3093\u3067\u3059\u304b\u306d\u2026\n    if(digitalRead(SW) == HIGH){\n    digitalWrite(DP_LED,HIGH);\n    if((millis() &gt;= time_now + period)||(time_now == 0)){\n    time_now = millis();\n    //Serial.println(time_now);\n    //SD\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 creating and expanding SD files\n    //file_name = String(No) +\".csv\";//\u5165\u529b\u5024RD\u306e\u5f8c\u306b\".CSV\"\u3092\u3064\u3051\u308b add \".CSV\" after input value RD\n    //file_name.toCharArray(FILE_NAME_buf, file_name.length()+1); //FILE_NAME\u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u540d\u3092char\u578b\u3067\u79fb\u884c migrate configuration file name to FILE_NAME with char type\n    //File dataFile = SD.open(FILE_NAME_buf,FILE_WRITE);//\u66f8\u304d\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u5c55\u958b expansion of write files\n    if(1){\n    //\u5404\u30bb\u30f3\u30b5\u304b\u3089\u306e\u30c7\u30fc\u30bf\u53d6\u5f97 data acquisition from each sensor\n    APin_F = analogRead(5);\n    APin_ax = analogRead(1);\n    APin_ay = analogRead(0);\n    APin_az = analogRead(2);\n    //\u5404\u7269\u7406\u91cf\u3078\u306e\u5909\u63db\u3000Conversion to physical quantity\n    //\u5727\u529b\u30bb\u30f3\u30b5\u5024\u3092\u529b [N]\u3078\u3000Conversion to force [N]\n    F_Vout = Vcc * APin_F / 1024;\n    Rfsr = Rm * F_Vout / (Vcc - F_Vout);\n    //\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u5024\u3092\u52a0\u901f\u5ea6 [m/s^2]\u3078 Conversion to acceleration [m/s^2]\n    ax_row = APin_ax * 5.0 / 1023.0 - 2.5;\n    ay_row = APin_ay * 5.0 / 1023.0 - 2.5;\n    az_row = APin_az * 5.0 / 1023.0 - 2.5;\n    //Prepare to send to Processing\n    mySerial.write('H'); //Data header\n    mySerial.write(highByte(APin_F)); //Send F high byte data\n    mySerial.write(lowByte(APin_F)); //Send F low byte data\n    mySerial.write(highByte(APin_ax)); //Send ax high byte data\n    mySerial.write(lowByte(APin_ax)); //Send ax low byte data\n    mySerial.write(highByte(APin_ay)); //Send ay high byte data\n    mySerial.write(lowByte(APin_ay)); //Send ay low byte data\n    mySerial.write(highByte(APin_az)); //Send az high byte data\n    mySerial.write(lowByte(APin_az)); //Send az low byte data\n    Count=Count + 1; //Time count up\n    if(digitalRead(4) == LOW &amp;&amp; Count&gt;=10){ //\u8a08\u6e2c\u4e2d\u306b\u30dc\u30bf\u30f3\u5165\u529b\u304c\u3042\u308a,Count\u304c10\u4ee5\u4e0a\u306a\u3089\u8a08\u6e2c\u3092\u7d42\u4e86\u3059\u308bif\u5206 if there is a button input during the measurement and if Count is 10 or more, the measurement is terminated (entering the if statement)\n    digitalWrite(DP_LED,LOW); //LED\u6d88\u706f LED turns off\n    /* No=No+1;\n    // if(No&gt;256){\n    // No=0;\n    // }\n    EEPROM.write(1,No);\n    */\n    //delay(ST); //\u8a08\u6e2c\u7d42\u4e86\u5f8c\u306e\u786c\u76f4 delaying after the end of the measurement\n    Serial.println(F(\"FINISH AND NEXT...\"));\n    }\n    }\n    }\n    char MD = mySerial.read();\n    if(MD == '5'){\n    melody_play(0);\n    }else if(MD == '6'){\n    melody_play(1);\n    } else if(MD == '7'){\n    melody_play(2);\n    }else if(MD == '8'){\n    melody_play(3);\n    }else if(MD == '9'){\n    melody_play(4);\n    }\n    }\n    //\u97f3\u697d\u518d\u751f\u30d7\u30ed\u30c8\u30b3\u30eb(\u4e00\u756a\u6700\u5f8c\u306b\u5b9f\u884c\u3001\u5916\u3057\u3061\u3083\u30c0\u30e1)\n    melody_seqence();\n    }\n\n# changed part\n\n    if (mySerial.available() &gt; 0) {\n    char MD = mySerial.read();\n    if (MD == '5') {\n    myDFplayer.play(1);\n    } else if (MD == '6') {\n    myDFplayer.play(2);\n    } else if (MD == '7') {\n    myDFplayer.play(3);\n    } else if (MD == '8') {\n    myDFplayer.play(4);\n    } else if (MD == '9') {\n    myDFplayer.play(5);\n    }\n    }\n    }\n    //\u97f3\u697d\u518d\u751f\u30d7\u30ed\u30c8\u30b3\u30eb(\u4e00\u756a\u6700\u5f8c\u306b\u5b9f\u884c\u3001\u5916\u3057\u3061\u3083\u30c0\u30e1)\n    melody_seqence();\n    }",
  "author_fullname": "t2_m1eyv895",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "Help me",
  "link_flair_richtext": [],
  "subreddit_name_prefixed": "r/Arduino_AI",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": null,
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_1abeeqh",
  "quarantine": false,
  "link_flair_text_color": "dark",
  "upvote_ratio": 0.75,
  "author_flair_background_color": null,
  "subreddit_type": "public",
  "ups": 2,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": null,
  "is_original_content": false,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": null,
  "can_mod_post": false,
  "score": 2,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "self",
  "edited": false,
  "author_flair_css_class": null,
  "author_flair_richtext": [],
  "gildings": {},
  "content_categories": null,
  "is_self": true,
  "mod_note": null,
  "created": 1706260984.0,
  "link_flair_type": "text",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "text",
  "domain": "self.Arduino_AI",
  "allow_live_comments": false,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This code plays music on a regular speaker by sending data(port.write(number)) to the port from a Processing program. However, when attempting to use DFPlayer instead of the  &lt;strong&gt;melody_play(3)&lt;/strong&gt; section at the end of the code, the audio doesn&amp;#39;t play even when writing code as follows. What could be the reason for this, and how can it be corrected?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;SoftwareSerial.h&amp;gt;\n//Pin Assign\n#define BT_RX 6\n#define BT_TX 7\n#define DP_LED 2\n#define SP 5\n#define SW 4\n//Constant Value\n#define BAUDRATE 115200\n//Getting raw data\n#define period 100 //measurement period\n#define ST 1000 //\u8a08\u6e2c\u4ee5\u5916\u3067\u306e\u5f85\u3061\u6642\u9593\u306e\u8a2d\u5b9a setting of waiting time (besides measuring)\n#define Vcc 5.0 //\u96fb\u5727\u5024\u21d2\u5727\u529b\u5024\u3067\u4f7f\u7528 voltage value \u21d2 used at pressure value\n#define Rm 1.0 //\u96fb\u5727\u5024\u21d2\u5727\u529b\u5024\u3067\u4f7f\u7528 voltage value \u21d2 used at pressure value\n#include &amp;quot;SoftwareSerial.h&amp;quot;\n#include &amp;quot;DFRobotDFPlayerMini.h&amp;quot;\n// Use pins 2 and 3 to communicate with DFPlayer Mini\nstatic const uint8_t PIN_MP3_TX = 2; // Connects to module&amp;#39;s RX\nstatic const uint8_t PIN_MP3_RX = 3; // Connects to module&amp;#39;s TX\nSoftwareSerial softwareSerial(PIN_MP3_RX, PIN_MP3_TX);\nSoftwareSerial mySerial(BT_RX,BT_TX);\n// Create the Player object\nDFRobotDFPlayerMini myDFplayer;\n//Software Serial class\n//--\u8ffd\u52a0\u90e8\u5206------------------------\n//Valiable\nint melo[8][24];\nint wait[8][24];\nunsigned long melody_millis = 0;\nint melody_count = 0;\nint melody_flag = -1;\n//-----------------------------------\n//Time management\nunsigned long time_now = 0; //time in which the measurement is done\nint Count = 0; //\u8a08\u6e2c\u7d42\u4e86\u7528\u306e\u30ab\u30a6\u30f3\u30c8 count for measuring termination (in case of pressing the button twice by accident)\nint APin_F = 0; //Analogread\u5727\u529b\u5024\u5165\u529b pressure value input\nint APin_ax, APin_ay, APin_az; //Analogread\u52a0\u901f\u5ea6\u5165\u529b x axis acceleration input\nfloat F_Vout, Rfsr; //Used for calculate force\nfloat ax_row, ay_row, az_row; //Acceleration [G]\n//------\u8ffd\u52a0\u90e8\u5206-----------------------------\nvoid melody_init(){\n//Melody Setup\nint i,j;//temporary(\u4eee\u306e\uff0c\u4e00\u6642\u7684\u306e)\n//initialize valiable(\u5909\u6570\u306e\u521d\u671f\u5316)\nfor(i = 0;i &amp;lt; 8;i++){\nfor(j = 0;j &amp;lt; 24;j++){\nmelo[i][j] = -1;//-1 is no define(-1\u306f\u5b9a\u7fa9\u3057\u306a\u3044)\nwait[i][j] = -1;//-1 is no define\n}\n}\n}\nvoid melody_setup(){\n//\u3053\u306e\u95a2\u6570\u3067\u4f5c\u66f2\u3057\u307e\u3059\u3002\n//\u73fe\u72b68\u66f2\u767b\u9332\u53ef\u80fd\u30671\u66f2\u3042\u305f\u308a16\u97f3(\u4f11\u7b26\u542b)\u9cf4\u3089\u305b\u307e\u3059\n//melody_set(\u66f2\u756a\u53f7,\u5468\u6ce2\u6570[Hz],\u9cf4\u3089\u3059\u6642\u9593[ms])\u3067\u3059(\u5468\u6ce2\u6570\u30920\u306b\u3059\u308b\u3068\u4f11\u7b26)\n//melody_play(\u66f2\u756a\u53f7)\u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u9cf4\u3089\u305b\u307e\u3059\u3002\n//\u4f8b\u3068\u3057\u3066\u3001\u66f2\u756a\u53f70\u756a\u306b\u30a8\u30ea\u30fc\u30bc\u30011\u756a\u306b\u4eba\u751f\u306e\u30e1\u30ea\u30fc\u30b4\u30fc\u30e9\u30f3\u30c9\u3092\u767b\u9332\u3057\u3066\u307e\u3059\n//\u5468\u6ce2\u6570\u3092\u767b\u9332\u3059\u308b\u3068\u304d\u306fmelo_freq(\u30aa\u30af\u30bf\u30fc\u30d6[],\u97f3\u7a0b(\u5927\u6587\u5b57\u3067\u534a\u97f3))\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4fbf\u5229\u3067\u3059\n//melo_freq(0,&amp;#39;a&amp;#39;);\u3060\u3068440Hz(\u57fa\u6e96\u30d4\u30c3\u30c1\u306eA)\n//\u66f2\u756a\u53f70\u756a\u3000\u30de\u30ea\u30aa1up\u30006\u97f3\nmelody_set(0,melo_freq(1,&amp;#39;e&amp;#39;),150);//1\u97f3\u76ee\nmelody_set(0,melo_freq(1,&amp;#39;g&amp;#39;),150);//2\u97f3\u76ee\nmelody_set(0,melo_freq(2,&amp;#39;e&amp;#39;),150);//3\u97f3\u76ee\nmelody_set(0,melo_freq(2,&amp;#39;c&amp;#39;),150);//4\u97f3\u76ee\nmelody_set(0,melo_freq(2,&amp;#39;d&amp;#39;),150);//5\u97f3\u76ee\nmelody_set(0,melo_freq(2,&amp;#39;g&amp;#39;),150);//6\u97f3\u76ee\n//\u66f2\u756a\u53f71\u756a\u3000\u4eba\u751f\u306e\u30e1\u30ea\u30fc\u30b4\u30fc\u30e9\u30f3\u30c9 22\u97f3\nmelody_set(1,melo_freq(0,&amp;#39;d&amp;#39;),250);//1\u97f3\u76ee\nmelody_set(1,melo_freq(0,&amp;#39;g&amp;#39;),250);//2\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;A&amp;#39;),250);//3\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;d&amp;#39;),350);//4\u97f3\u76ee\nmelody_set(1,0,50);//5\u97f3\u76ee(\u4f11\u7b26)\nmelody_set(1,melo_freq(1,&amp;#39;d&amp;#39;),250);//6\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;c&amp;#39;),250);//7\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;A&amp;#39;),250);//8\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;a&amp;#39;),250);//9\u97f3\u76ee\nmelody_set(1,melo_freq(1,&amp;#39;A&amp;#39;),750);//10\u97f3\u76ee\nmelody_set(1,melo_freq(0,&amp;#39;g&amp;#39;),250);\nmelody_set(1,melo_freq(1,&amp;#39;A&amp;#39;),250);\nmelody_set(1,melo_freq(1,&amp;#39;d&amp;#39;),250);\nmelody_set(1,melo_freq(1,&amp;#39;g&amp;#39;),350);\nmelody_set(1,0,50);//15\u97f3\u76ee(\u4f11\u7b26)\nmelody_set(1,melo_freq(1,&amp;#39;g&amp;#39;),250);\nmelody_set(1,0,10);//15\u97f3\u76ee(\u4f11\u7b26)\nmelody_set(1,melo_freq(1,&amp;#39;g&amp;#39;),250);\nmelody_set(1,melo_freq(2,&amp;#39;a&amp;#39;),250);\nmelody_set(1,melo_freq(1,&amp;#39;f&amp;#39;),100);\nmelody_set(1,melo_freq(1,&amp;#39;D&amp;#39;),100);\nmelody_set(1,melo_freq(1,&amp;#39;f&amp;#39;),500);\n//\u66f2\u756a\u53f72\u756a\u3000\u30de\u30ea\u30aa\u306e\u30b3\u30a4\u30f3\u97f3 2\u97f3\nmelody_set(2,melo_freq(2,&amp;#39;b&amp;#39;),100);\nmelody_set(2,melo_freq(2,&amp;#39;e&amp;#39;),300);\n//\u66f2\u756a\u53f73\u756a\u3000\u8d77\u52d5\u97f3 1\u97f3\nmelody_set(3,melo_freq(1,&amp;#39;f&amp;#39;),50);\n//\u66f2\u756a\u53f74\u756a\u3000\u5207\u308a\u51fa\u3057\u97f3 2\u97f3\nmelody_set(4,melo_freq(1,&amp;#39;c&amp;#39;),100);\nmelody_set(4,melo_freq(1,&amp;#39;d&amp;#39;),100);\n}\nvoid melody_set(int i,int freq,int de){\n//melody setup\nint temp;//temporary\nfor(temp = 0;temp &amp;lt; 24;temp++){\nif(melo[i][temp] == -1){//serch no define\nmelo[i][temp] = freq;//freqency set\nwait[i][temp] = de;//delay set\nbreak;//getout &amp;quot;for&amp;quot;\n}\n}\n}\nvoid melody_play(int num){\nmelody_count = 0;\nmelody_flag = num;\n}\nvoid melody_seqence(){\nif(melody_flag &amp;gt;= 0){\n//\u66f2\u756a\u53f7\u3092\u6307\u5b9a\u3055\u308c\u305f\u3089\nif(melody_count == 0){\n//\u97f3\u697d\u306e\u982d\u306e\u5834\u5408\ntone(SP,melo[melody_flag][melody_count]);\nmelody_millis = millis();\nmelody_count++;\n}\nif(melody_millis + wait[melody_flag][melody_count - 1] &amp;lt; millis()){\n//\u3082\u3057\u97f3\u3092\u9cf4\u3089\u3059\u6642\u9593\u3092\u6e80\u4e86\u3057\u305f\u3089\nif(melody_count == 24){\n//\u6700\u5927\u97f3\u6570\u307e\u3067\u5230\u9054\u3057\u3066\u305f\u3089\u7121\u7406\u3084\u308a\u518d\u751f\u7d42\u4e86\nnoTone(SP);\nmelody_flag = -1;\nmelody_count = 0;\n}else{\n//\u6700\u5927\u97f3\u6570\u3067\u306f\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u97f3\u3092\u9cf4\u3089\u3059\nif(melo[melody_flag][melody_count] == -1){\n//\u3082\u3057\u975e\u767b\u9332\u3060\u3063\u305f\u5834\u5408\u306f\u518d\u751f\u4fee\u4e86\nnoTone(SP);\nmelody_flag = -1;\nmelody_count = 0;\n}else if(melo[melody_flag][melody_count] == 0){\n//\u7121\u97f3\u306a\u3089\u97f3\u306e\u505c\u6b62\u51e6\u7406\u3057\u3066\u518d\u751f\u7d99\u7d9a\nnoTone(SP);\nmelody_millis = millis();\nmelody_count++;\n}else{\n//\u767b\u9332\u3055\u308c\u3066\u3044\u308c\u3070\u305d\u306e\u97f3\u3092\u518d\u751f\ntone(SP,melo[melody_flag][melody_count]);\nmelody_millis = millis();\nmelody_count++;\n}\n}\n}\n}\n}\nint melo_freq(byte octave,char amp){\nint temp = 12 * octave;\nif(amp == &amp;#39;c&amp;#39;){\ntemp += 3;\n}else if(amp == &amp;#39;C&amp;#39;){\ntemp += 4;\n}else if(amp == &amp;#39;d&amp;#39;){\ntemp += 5;\n}else if(amp == &amp;#39;D&amp;#39;){\ntemp += 6;\n}else if(amp == &amp;#39;e&amp;#39;){\ntemp += 7;\n}else if(amp == &amp;#39;f&amp;#39;){\ntemp += 8;\n}else if(amp == &amp;#39;F&amp;#39;){\ntemp += 9;\n}else if(amp == &amp;#39;g&amp;#39;){\ntemp += 10;\n}else if(amp == &amp;#39;G&amp;#39;){\ntemp += 11;\n}else if(amp == &amp;#39;a&amp;#39;){\ntemp += 0;\n}else if(amp == &amp;#39;A&amp;#39;){\ntemp += 1;\n}else if(amp == &amp;#39;b&amp;#39;){\ntemp += 2;\n}\nfloat freq = 440.0 * pow(2.0,(temp/12.0));\nreturn((int)freq);\n}\n//-------------------------------------------------------------------------------\nvoid setup() {\n//Serial settings\nSerial.begin(BAUDRATE);//USB serial\nmySerial.begin(BAUDRATE);//Bluetooth serial\n//pin settings\npinMode(SW,INPUT_PULLUP);//Button\npinMode(DP_LED,OUTPUT);//LED output\npinMode(SS,OUTPUT);//SPI SSpin output\npinMode(SP,OUTPUT);//Speaker pin output\n//End of setup\nmelody_init();//Melody init\nmelody_setup();//Melody setting\nmelody_play(3);\n}\nvoid loop() {\n//\u30b9\u30a4\u30c3\u30c1\u4f55\u3066\u6709\u308b\u3093\u3067\u3059\u304b\u306d\u2026\nif(digitalRead(SW) == HIGH){\ndigitalWrite(DP_LED,HIGH);\nif((millis() &amp;gt;= time_now + period)||(time_now == 0)){\ntime_now = millis();\n//Serial.println(time_now);\n//SD\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210 creating and expanding SD files\n//file_name = String(No) +&amp;quot;.csv&amp;quot;;//\u5165\u529b\u5024RD\u306e\u5f8c\u306b&amp;quot;.CSV&amp;quot;\u3092\u3064\u3051\u308b add &amp;quot;.CSV&amp;quot; after input value RD\n//file_name.toCharArray(FILE_NAME_buf, file_name.length()+1); //FILE_NAME\u306b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u540d\u3092char\u578b\u3067\u79fb\u884c migrate configuration file name to FILE_NAME with char type\n//File dataFile = SD.open(FILE_NAME_buf,FILE_WRITE);//\u66f8\u304d\u8fbc\u307f\u30d5\u30a1\u30a4\u30eb\u306e\u5c55\u958b expansion of write files\nif(1){\n//\u5404\u30bb\u30f3\u30b5\u304b\u3089\u306e\u30c7\u30fc\u30bf\u53d6\u5f97 data acquisition from each sensor\nAPin_F = analogRead(5);\nAPin_ax = analogRead(1);\nAPin_ay = analogRead(0);\nAPin_az = analogRead(2);\n//\u5404\u7269\u7406\u91cf\u3078\u306e\u5909\u63db\u3000Conversion to physical quantity\n//\u5727\u529b\u30bb\u30f3\u30b5\u5024\u3092\u529b [N]\u3078\u3000Conversion to force [N]\nF_Vout = Vcc * APin_F / 1024;\nRfsr = Rm * F_Vout / (Vcc - F_Vout);\n//\u52a0\u901f\u5ea6\u30bb\u30f3\u30b5\u5024\u3092\u52a0\u901f\u5ea6 [m/s^2]\u3078 Conversion to acceleration [m/s^2]\nax_row = APin_ax * 5.0 / 1023.0 - 2.5;\nay_row = APin_ay * 5.0 / 1023.0 - 2.5;\naz_row = APin_az * 5.0 / 1023.0 - 2.5;\n//Prepare to send to Processing\nmySerial.write(&amp;#39;H&amp;#39;); //Data header\nmySerial.write(highByte(APin_F)); //Send F high byte data\nmySerial.write(lowByte(APin_F)); //Send F low byte data\nmySerial.write(highByte(APin_ax)); //Send ax high byte data\nmySerial.write(lowByte(APin_ax)); //Send ax low byte data\nmySerial.write(highByte(APin_ay)); //Send ay high byte data\nmySerial.write(lowByte(APin_ay)); //Send ay low byte data\nmySerial.write(highByte(APin_az)); //Send az high byte data\nmySerial.write(lowByte(APin_az)); //Send az low byte data\nCount=Count + 1; //Time count up\nif(digitalRead(4) == LOW &amp;amp;&amp;amp; Count&amp;gt;=10){ //\u8a08\u6e2c\u4e2d\u306b\u30dc\u30bf\u30f3\u5165\u529b\u304c\u3042\u308a,Count\u304c10\u4ee5\u4e0a\u306a\u3089\u8a08\u6e2c\u3092\u7d42\u4e86\u3059\u308bif\u5206 if there is a button input during the measurement and if Count is 10 or more, the measurement is terminated (entering the if statement)\ndigitalWrite(DP_LED,LOW); //LED\u6d88\u706f LED turns off\n/* No=No+1;\n// if(No&amp;gt;256){\n// No=0;\n// }\nEEPROM.write(1,No);\n*/\n//delay(ST); //\u8a08\u6e2c\u7d42\u4e86\u5f8c\u306e\u786c\u76f4 delaying after the end of the measurement\nSerial.println(F(&amp;quot;FINISH AND NEXT...&amp;quot;));\n}\n}\n}\nchar MD = mySerial.read();\nif(MD == &amp;#39;5&amp;#39;){\nmelody_play(0);\n}else if(MD == &amp;#39;6&amp;#39;){\nmelody_play(1);\n} else if(MD == &amp;#39;7&amp;#39;){\nmelody_play(2);\n}else if(MD == &amp;#39;8&amp;#39;){\nmelody_play(3);\n}else if(MD == &amp;#39;9&amp;#39;){\nmelody_play(4);\n}\n}\n//\u97f3\u697d\u518d\u751f\u30d7\u30ed\u30c8\u30b3\u30eb(\u4e00\u756a\u6700\u5f8c\u306b\u5b9f\u884c\u3001\u5916\u3057\u3061\u3083\u30c0\u30e1)\nmelody_seqence();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;changed part&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;if (mySerial.available() &amp;gt; 0) {\nchar MD = mySerial.read();\nif (MD == &amp;#39;5&amp;#39;) {\nmyDFplayer.play(1);\n} else if (MD == &amp;#39;6&amp;#39;) {\nmyDFplayer.play(2);\n} else if (MD == &amp;#39;7&amp;#39;) {\nmyDFplayer.play(3);\n} else if (MD == &amp;#39;8&amp;#39;) {\nmyDFplayer.play(4);\n} else if (MD == &amp;#39;9&amp;#39;) {\nmyDFplayer.play(5);\n}\n}\n}\n//\u97f3\u697d\u518d\u751f\u30d7\u30ed\u30c8\u30b3\u30eb(\u4e00\u756a\u6700\u5f8c\u306b\u5b9f\u884c\u3001\u5916\u3057\u3061\u3083\u30c0\u30e1)\nmelody_seqence();\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": null,
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_7yd5re",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "",
  "id": "1abeeqh",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "Weekly_Mycologist_99",
  "discussion_type": null,
  "num_comments": 0,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": null,
  "permalink": "/r/Arduino_AI/comments/1abeeqh/help_me/",
  "stickied": false,
  "url": "https://www.reddit.com/r/Arduino_AI/comments/1abeeqh/help_me/",
  "subreddit_subscribers": 3135,
  "created_utc": 1706260984.0,
  "num_crossposts": 0,
  "media": null,
  "is_video": false
}