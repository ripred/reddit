{
  "approved_at_utc": null,
  "subreddit": "ripred",
  "selftext": "Here is the current full source code for the intuitive and flexible `Smartpin` idea and grammar. This has not been wrapped into a self contained header file yet.\n\nMy thoughts are that I may add two more classes: one for analog use and another for digital use to keep the declaration lines clean, dunno, still ruminating on it...\n\n    /*\n     * SmartPin.ino\n     * \n     * Experimenting with the idea of an object-oriented pin class\n     * that uses operator overloading to intuitively abbreviate the \n     * usage of digitalRead(...), digitalWrite(...), analogRead(...)\n     * and analogWrite(...)\n     * \n     * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n     * example 1: simple LED following a button press\n     * \n     *    SmartPin button(2, INPUT_PULLUP), led(3, OUTPUT);\n     * \n     *    while (true) {\n     *        led = !button;    // we invert the HIGH/LOW value since the button is active-low\n     *        ...\n     *    }\n     * \n     * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n     * \n     * example 2: reading an ADC pin with a potentiometer on it and using that\n     *            to control the brightness of an output LED. Notice how semantically\n     *            similar the code is to the button code above \ud83d\ude42\n     * \n     *    SmartPin potentiometer(A0, INPUT, analogWrite, analogRead);\n     *    SmartPin led(3, OUTPUT, analogWrite);\n     * \n     *    while (true) {\n     *        led = potentiometer / 4;    // convert 0-1023 value into 0-255 value\n     *    //  led = potentiometer &gt;&gt; 2;   // (same result, smaller code size by 2 bytes)\n     *        ...\n     *    }\n     * \n     * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n     * \n     * version 1.0 Feb 2024 trent m. wyatt\n     * \n     */\n    \n    #include &lt;inttypes.h&gt;\n    \n    using OutFunc = void (*)(uint8_t, uint8_t);  // signature for digitalWrite and analogWrite\n    using InFunc = int (*)(uint8_t);             // signature for digitalRead and analogRead\n    \n    struct SmartPin {\n    private:\n        int8_t    pin;\n        OutFunc   out_func;\n        InFunc    in_func;\n    \n        SmartPin() = delete;\n    \n    public:\n        SmartPin(\n          int8_t const pin,                 // the pin to use\n          int8_t const mode,                // the pinMode\n          OutFunc ofn = digitalWrite,       // the default output function\n          InFunc ifn = digitalRead) :       // the default input function\n            pin(pin), \n            out_func(ofn), \n            in_func(ifn)\n        {\n            pinMode(pin, mode);\n        }\n    \n        // treat all SmartPin to SmartPin assignments as integer operations\n        SmartPin &amp; operator = (SmartPin const &amp;sp)\n        {\n            return *this = int(sp);\n        }\n    \n        // write to an output pin when an integer value is assigned to us\n        SmartPin &amp; operator = (int const state)\n        {\n            out_func(pin, state);\n            return *this;\n        }\n    \n        // read from an input pin when we're being coerced into an integer value\n        operator int() const \n        {\n            return in_func(pin);\n        }\n    \n    };  // struct SmartPin\n\n&amp;#x200B;",
  "author_fullname": "t2_adfkq",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "Update on SmartPin Idea: Full source",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "Project Update"
    }
  ],
  "subreddit_name_prefixed": "r/ripred",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": "",
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_1as4jx4",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 1.0,
  "author_flair_background_color": "transparent",
  "subreddit_type": "public",
  "ups": 1,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": "9fa2ceaa-053c-11ed-bb97-124dff5ea4b4",
  "is_original_content": false,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "Project Update",
  "can_mod_post": false,
  "score": 1,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "self",
  "edited": 1708078047.0,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "a": ":snoo_facepalm:",
      "e": "emoji",
      "u": "https://emoji.redditmedia.com/wzxf63qpaezz_t5_3nqvj/snoo_facepalm"
    }
  ],
  "gildings": {},
  "content_categories": null,
  "is_self": true,
  "mod_note": null,
  "created": 1708075586.0,
  "link_flair_type": "richtext",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.ripred",
  "allow_live_comments": false,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Here is the current full source code for the intuitive and flexible &lt;code&gt;Smartpin&lt;/code&gt; idea and grammar. This has not been wrapped into a self contained header file yet.&lt;/p&gt;\n\n&lt;p&gt;My thoughts are that I may add two more classes: one for analog use and another for digital use to keep the declaration lines clean, dunno, still ruminating on it...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\n * SmartPin.ino\n * \n * Experimenting with the idea of an object-oriented pin class\n * that uses operator overloading to intuitively abbreviate the \n * usage of digitalRead(...), digitalWrite(...), analogRead(...)\n * and analogWrite(...)\n * \n * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n * example 1: simple LED following a button press\n * \n *    SmartPin button(2, INPUT_PULLUP), led(3, OUTPUT);\n * \n *    while (true) {\n *        led = !button;    // we invert the HIGH/LOW value since the button is active-low\n *        ...\n *    }\n * \n * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n * \n * example 2: reading an ADC pin with a potentiometer on it and using that\n *            to control the brightness of an output LED. Notice how semantically\n *            similar the code is to the button code above \ud83d\ude42\n * \n *    SmartPin potentiometer(A0, INPUT, analogWrite, analogRead);\n *    SmartPin led(3, OUTPUT, analogWrite);\n * \n *    while (true) {\n *        led = potentiometer / 4;    // convert 0-1023 value into 0-255 value\n *    //  led = potentiometer &amp;gt;&amp;gt; 2;   // (same result, smaller code size by 2 bytes)\n *        ...\n *    }\n * \n * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n * \n * version 1.0 Feb 2024 trent m. wyatt\n * \n */\n\n#include &amp;lt;inttypes.h&amp;gt;\n\nusing OutFunc = void (*)(uint8_t, uint8_t);  // signature for digitalWrite and analogWrite\nusing InFunc = int (*)(uint8_t);             // signature for digitalRead and analogRead\n\nstruct SmartPin {\nprivate:\n    int8_t    pin;\n    OutFunc   out_func;\n    InFunc    in_func;\n\n    SmartPin() = delete;\n\npublic:\n    SmartPin(\n      int8_t const pin,                 // the pin to use\n      int8_t const mode,                // the pinMode\n      OutFunc ofn = digitalWrite,       // the default output function\n      InFunc ifn = digitalRead) :       // the default input function\n        pin(pin), \n        out_func(ofn), \n        in_func(ifn)\n    {\n        pinMode(pin, mode);\n    }\n\n    // treat all SmartPin to SmartPin assignments as integer operations\n    SmartPin &amp;amp; operator = (SmartPin const &amp;amp;sp)\n    {\n        return *this = int(sp);\n    }\n\n    // write to an output pin when an integer value is assigned to us\n    SmartPin &amp;amp; operator = (int const state)\n    {\n        out_func(pin, state);\n        return *this;\n    }\n\n    // read from an input pin when we&amp;#39;re being coerced into an integer value\n    operator int() const \n    {\n        return in_func(pin);\n    }\n\n};  // struct SmartPin\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "5bfb5318-a03e-11ee-adc5-42b05cf4a7d6",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": ":snoo_facepalm:",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_6as6rv",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "#8242ff",
  "id": "1as4jx4",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ripred3",
  "discussion_type": null,
  "num_comments": 0,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": "dark",
  "permalink": "/r/ripred/comments/1as4jx4/update_on_smartpin_idea_full_source/",
  "stickied": false,
  "url": "https://www.reddit.com/r/ripred/comments/1as4jx4/update_on_smartpin_idea_full_source/",
  "subreddit_subscribers": 43,
  "created_utc": 1708075586.0,
  "num_crossposts": 0,
  "media": null,
  "is_video": false
}