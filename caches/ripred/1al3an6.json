{
  "approved_at_utc": null,
  "subreddit": "ripred",
  "selftext": "A short working example from a larger project I'm experimenting with. The full class also includes support for `analogRead(...)` and `analogWrite(...)` as well as many other intuitive abbreviations:\n\n    /*\n     * SmartPin.ino\n     * \n     * experimenting with the idea of an object-oriented pin class\n     * that uses operator overloading to abbreviate digitalRead(...)\n     * and digitalWrite(...)\n     * \n     * The full version of this class has dozens of other features.\n     * \n     */\n    enum MagicNumbers {\n        // project-specific pin usage; Change as needed\n        BUTTON_PIN = 2,\n    \n    };  // enum MagicNumbers\n    \n    struct SmartPin {\n    private:\n        int8_t  pin;\n    \n        SmartPin() = delete;\n    \n    public:\n        SmartPin(int const p, int const mode) : pin(p)\n        {\n            pinMode(pin, mode);\n        }\n    \n        // write to an output pin when an integer value is assigned to us\n        SmartPin &amp; operator = (int const state)\n        {\n            digitalWrite(pin, state);\n            return *this;\n        }\n    \n        // treat all SmartPin to SmartPin assignments as integer operations\n        SmartPin &amp; operator = (SmartPin const &amp;sp)\n        {\n            return *this = int(sp);\n        }\n    \n        // read from an input pin when we're being coerced into an integer\n        operator int() const \n        {\n            return digitalRead(pin);\n        }\n    \n    };  // struct SmartPin\n    \n    SmartPin  led_pin(LED_BUILTIN, OUTPUT);\n    SmartPin  const button_pin(BUTTON_PIN, INPUT_PULLUP);\n    \n    void setup()\n    {\n       // example of simple integer assignment\n        for (int i=0; i &lt; 10; i++) {\n            led_pin = HIGH;\n            delay(100);\n            led_pin = LOW;\n            delay(100);\n        }\n    }\n    \n    void loop()\n    {\n        led_pin = button_pin;\n    }",
  "author_fullname": "t2_adfkq",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "Using operator overloading for GPIO reading and writing",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "Project"
    }
  ],
  "subreddit_name_prefixed": "r/ripred",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": "",
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_1al3an6",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 1.0,
  "author_flair_background_color": "transparent",
  "subreddit_type": "public",
  "ups": 1,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": "9fa2ceaa-053c-11ed-bb97-124dff5ea4b4",
  "is_original_content": false,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "Project",
  "can_mod_post": false,
  "score": 1,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "self",
  "edited": 1707363197.0,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "a": ":snoo_facepalm:",
      "e": "emoji",
      "u": "https://emoji.redditmedia.com/wzxf63qpaezz_t5_3nqvj/snoo_facepalm"
    }
  ],
  "gildings": {},
  "content_categories": null,
  "is_self": true,
  "mod_note": null,
  "created": 1707313658.0,
  "link_flair_type": "richtext",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.ripred",
  "allow_live_comments": false,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A short working example from a larger project I&amp;#39;m experimenting with. The full class also includes support for &lt;code&gt;analogRead(...)&lt;/code&gt; and &lt;code&gt;analogWrite(...)&lt;/code&gt; as well as many other intuitive abbreviations:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\n * SmartPin.ino\n * \n * experimenting with the idea of an object-oriented pin class\n * that uses operator overloading to abbreviate digitalRead(...)\n * and digitalWrite(...)\n * \n * The full version of this class has dozens of other features.\n * \n */\nenum MagicNumbers {\n    // project-specific pin usage; Change as needed\n    BUTTON_PIN = 2,\n\n};  // enum MagicNumbers\n\nstruct SmartPin {\nprivate:\n    int8_t  pin;\n\n    SmartPin() = delete;\n\npublic:\n    SmartPin(int const p, int const mode) : pin(p)\n    {\n        pinMode(pin, mode);\n    }\n\n    // write to an output pin when an integer value is assigned to us\n    SmartPin &amp;amp; operator = (int const state)\n    {\n        digitalWrite(pin, state);\n        return *this;\n    }\n\n    // treat all SmartPin to SmartPin assignments as integer operations\n    SmartPin &amp;amp; operator = (SmartPin const &amp;amp;sp)\n    {\n        return *this = int(sp);\n    }\n\n    // read from an input pin when we&amp;#39;re being coerced into an integer\n    operator int() const \n    {\n        return digitalRead(pin);\n    }\n\n};  // struct SmartPin\n\nSmartPin  led_pin(LED_BUILTIN, OUTPUT);\nSmartPin  const button_pin(BUTTON_PIN, INPUT_PULLUP);\n\nvoid setup()\n{\n   // example of simple integer assignment\n    for (int i=0; i &amp;lt; 10; i++) {\n        led_pin = HIGH;\n        delay(100);\n        led_pin = LOW;\n        delay(100);\n    }\n}\n\nvoid loop()\n{\n    led_pin = button_pin;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "10e54cb2-a03e-11ee-82f2-8255c429eabf",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": ":snoo_facepalm:",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_6as6rv",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "#6767f1",
  "id": "1al3an6",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ripred3",
  "discussion_type": null,
  "num_comments": 3,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": "dark",
  "permalink": "/r/ripred/comments/1al3an6/using_operator_overloading_for_gpio_reading_and/",
  "stickied": false,
  "url": "https://www.reddit.com/r/ripred/comments/1al3an6/using_operator_overloading_for_gpio_reading_and/",
  "subreddit_subscribers": 43,
  "created_utc": 1707313658.0,
  "num_crossposts": 1,
  "media": null,
  "is_video": false
}