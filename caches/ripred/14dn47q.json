{
  "approved_at_utc": null,
  "subreddit": "ripred",
  "selftext": "",
  "user_reports": [],
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "Updates to Smooth Library",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "Library"
    }
  ],
  "subreddit_name_prefixed": "r/ripred",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": "",
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_14dn47q",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 1.0,
  "author_flair_background_color": "transparent",
  "subreddit_type": "public",
  "ups": 1,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": "9fa2ceaa-053c-11ed-bb97-124dff5ea4b4",
  "is_original_content": false,
  "author_fullname": "t2_adfkq",
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "Library",
  "can_mod_post": false,
  "score": 1,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "default",
  "edited": false,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "a": ":snoo_facepalm:",
      "e": "emoji",
      "u": "https://emoji.redditmedia.com/wzxf63qpaezz_t5_3nqvj/snoo_facepalm"
    }
  ],
  "gildings": {},
  "post_hint": "link",
  "content_categories": null,
  "is_self": false,
  "mod_note": null,
  "crosspost_parent_list": [
    {
      "approved_at_utc": null,
      "subreddit": "arduino",
      "selftext": "Just a quick update. The [Smooth library](https://github.com/ripred/Smooth) has been updated to include support for registering callbacks for:\n\n* change of average value\n* average value &lt;  lower limit\n* average value &gt;= upper limit\n\nThe following code and output show an example use for changes, and afterwards, for upper/lower limit callbacks: (hard to grok visually when both types are on at the same time)\n\n    /*\n     * Smooth_Callbacks.ino\n     * \n     * Example using callbacks with the Smooth Arduino library\n     * \n     */\n    #include &lt;Smooth.h&gt;\n    \n    // Define an alias for the number of samples we want to average together\n    #define  SMOOTHED_SAMPLE_SIZE  10\n    \n    // Smoothing average object\n    Smooth  average(SMOOTHED_SAMPLE_SIZE);\n    \n    // Simulated moving sample for this example\n    int sample = 0;\n    int last = 0;\n    \n    // function to display the sample count the current\n    // sample, and the current moving average\n    void display() {\n        char scratch[64] = \"\";\n        snprintf(scratch, sizeof(scratch), \"count: %4d, sample: %4d, average: %3d\\n\",\n            average.get_count(),\n            sample,\n            (int) average());\n    \n        Serial.print(scratch);\n    }\n    \n    // This function is our callback function for any changes to\n    // the running average. This gets registered with the library\n    // and then automatically called as needed.\n    void on_change(double const new_value) {\n        // We cast the value to an int everywhere in this example\n        // because we get multiple updates as the actual\n        // double (floating point) value changes.\n        // And we just want to see integer-level changes.\n        if (last != (int) new_value) {\n            last = (int) new_value;\n            Serial.print(\"on_change(...): \");\n            display();\n        }\n    }\n    \n    // This function is our callback function for changes to the\n    // running average that go above the upper limit we set when\n    // we registered this callback. This gets registered with the\n    // library and then automatically called as needed.\n    void on_upper(double const new_value) {\n        if (last != (int) new_value) {\n            last = (int) new_value;\n            Serial.print(\"on_upper(...): \");\n            display();\n        }\n    }\n    \n    \n    // This function is our callback function for changes to the\n    // running average that go below the lower limit we set when\n    // we registered this callback. This gets registered with the\n    // library and then automatically called as needed.\n    void on_lower(double const new_value) {\n        if (last != (int) new_value) {\n            last = (int) new_value;\n            Serial.print(\"on_lower(...): \");\n            display();\n        }\n    }\n    \n    void setup() {\n        Serial.begin(115200);\n    \n        // register our callback function(s)\n        average.set_change(on_change);\n    //  average.set_upper(on_upper, 3);  // called when &gt;= 3\n    //  average.set_lower(on_upper, 1);  // called when &lt;  1\n    }\n    \n    void loop() {\n        // create a random -1, 0, or +1 value\n        int const updown = random(0, 3) - 1;\n    \n        // move the simulated sample value up or down\n        sample += updown;\n    \n        // add the sample to the running average.\n        // Note Below: It is during this update\n        // that our callbacks might be called:\n        average += sample;\n    }\n\nexample `on_change(...)` output:\n\n    on_change(...): count:    5, sample:    2, average:   1\n    on_change(...): count:   10, sample:    4, average:   2\n    on_change(...): count:   18, sample:    4, average:   3\n    on_change(...): count:   26, sample:    2, average:   2\n    on_change(...): count:   53, sample:    5, average:   3\n    on_change(...): count:   58, sample:    6, average:   4\n    on_change(...): count:   73, sample:    3, average:   3\n    on_change(...): count:   91, sample:    1, average:   2\n    on_change(...): count:  120, sample:    5, average:   3\n    on_change(...): count:  130, sample:    2, average:   2\n    on_change(...): count:  138, sample:    0, average:   1\n    on_change(...): count:  152, sample:    4, average:   2\n    on_change(...): count:  155, sample:    1, average:   1\n    on_change(...): count:  158, sample:    3, average:   2\n    on_change(...): count:  184, sample:    1, average:   1\n    on_change(...): count:  231, sample:   -1, average:   0\n    on_change(...): count:  242, sample:    2, average:   1\n    on_change(...): count:  244, sample:    0, average:   0\n    on_change(...): count:  255, sample:   -3, average:  -1\n    on_change(...): count:  259, sample:   -5, average:  -2\n    on_change(...): count:  265, sample:   -4, average:  -3\n    on_change(...): count:  271, sample:   -7, average:  -4\n    on_change(...): count:  277, sample:   -7, average:  -5\n    on_change(...): count:  281, sample:   -8, average:  -6\n    on_change(...): count:  319, sample:   -4, average:  -5\n    on_change(...): count:  336, sample:   -9, average:  -6\n    on_change(...): count:  341, sample:   -8, average:  -7\n    on_change(...): count:  347, sample:  -10, average:  -8\n    on_change(...): count:  360, sample:  -11, average:  -9\n    on_change(...): count:  366, sample:  -12, average: -10\n    on_change(...): count:  370, sample:  -14, average: -11\n\nExample output for callbacks on just upper bounds &gt;= 3 and lower bounds &lt; 1:\n\n    on_upper(...): count:   18, sample:    4, average:   3\n    on_upper(...): count:   58, sample:    6, average:   4\n    on_upper(...): count:   73, sample:    3, average:   3\n    on_lower(...): count:  231, sample:   -1, average:   0\n    on_lower(...): count:  255, sample:   -3, average:  -1\n    on_lower(...): count:  259, sample:   -5, average:  -2\n    on_lower(...): count:  265, sample:   -4, average:  -3\n    on_lower(...): count:  271, sample:   -7, average:  -4\n    on_lower(...): count:  277, sample:   -7, average:  -5\n    on_lower(...): count:  281, sample:   -8, average:  -6\n    on_lower(...): count:  319, sample:   -4, average:  -5\n    on_lower(...): count:  336, sample:   -9, average:  -6\n    on_lower(...): count:  341, sample:   -8, average:  -7\n    on_lower(...): count:  347, sample:  -10, average:  -8\n    on_lower(...): count:  360, sample:  -11, average:  -9\n    on_lower(...): count:  366, sample:  -12, average: -10\n    on_lower(...): count:  370, sample:  -14, average: -11\n\nHave fun!\n\n`ripred`",
      "author_fullname": "t2_adfkq",
      "saved": false,
      "mod_reason_title": null,
      "gilded": 0,
      "clicked": false,
      "title": "Updates to Smooth Library",
      "link_flair_richtext": [
        {
          "a": ":Libraries:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/s7x3w35qfkna1_t5_2qknj/Libraries"
        },
        {
          "e": "text",
          "t": " Libraries and "
        },
        {
          "a": ":Algorithm:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/llmtcu1qfkna1_t5_2qknj/Algorithm"
        },
        {
          "e": "text",
          "t": " Algorithms  "
        }
      ],
      "subreddit_name_prefixed": "r/arduino",
      "hidden": false,
      "pwls": 6,
      "link_flair_css_class": "",
      "downs": 0,
      "thumbnail_height": null,
      "top_awarded_type": null,
      "hide_score": false,
      "name": "t3_14dml07",
      "quarantine": false,
      "link_flair_text_color": "light",
      "upvote_ratio": 1.0,
      "author_flair_background_color": "#00a6a5",
      "subreddit_type": "public",
      "ups": 5,
      "total_awards_received": 0,
      "media_embed": {},
      "thumbnail_width": null,
      "author_flair_template_id": "5cb3c302-0ef5-11ed-b9fd-aab9a872a9c2",
      "is_original_content": false,
      "user_reports": [],
      "secure_media": null,
      "is_reddit_media_domain": false,
      "is_meta": false,
      "category": null,
      "secure_media_embed": {},
      "link_flair_text": ":Libraries: Libraries and :Algorithm: Algorithms  ",
      "can_mod_post": false,
      "score": 5,
      "approved_by": null,
      "is_created_from_ads_ui": false,
      "author_premium": false,
      "thumbnail": "self",
      "edited": 1687220720.0,
      "author_flair_css_class": null,
      "author_flair_richtext": [
        {
          "a": ":400K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/apsbyvbwmfe91_t5_2qknj/400K"
        },
        {
          "a": ":Arduino_500k:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/o5qzzwwkvk5a1_t5_2qknj/Arduino_500k"
        },
        {
          "a": ":600K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/z23hxjk4hpeb1_t5_2qknj/600K"
        },
        {
          "a": ":640K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/g9r24xjaydqc1_t5_2qknj/640K"
        },
        {
          "e": "text",
          "t": " My other dev board is a Porsche"
        }
      ],
      "gildings": {},
      "post_hint": "self",
      "content_categories": null,
      "is_self": true,
      "mod_note": null,
      "created": 1687199547.0,
      "link_flair_type": "richtext",
      "wls": 6,
      "removed_by_category": null,
      "banned_by": null,
      "author_flair_type": "richtext",
      "domain": "self.arduino",
      "allow_live_comments": false,
      "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just a quick update. The &lt;a href=\"https://github.com/ripred/Smooth\"&gt;Smooth library&lt;/a&gt; has been updated to include support for registering callbacks for:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;change of average value&lt;/li&gt;\n&lt;li&gt;average value &amp;lt;  lower limit&lt;/li&gt;\n&lt;li&gt;average value &amp;gt;= upper limit&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The following code and output show an example use for changes, and afterwards, for upper/lower limit callbacks: (hard to grok visually when both types are on at the same time)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/*\n * Smooth_Callbacks.ino\n * \n * Example using callbacks with the Smooth Arduino library\n * \n */\n#include &amp;lt;Smooth.h&amp;gt;\n\n// Define an alias for the number of samples we want to average together\n#define  SMOOTHED_SAMPLE_SIZE  10\n\n// Smoothing average object\nSmooth  average(SMOOTHED_SAMPLE_SIZE);\n\n// Simulated moving sample for this example\nint sample = 0;\nint last = 0;\n\n// function to display the sample count the current\n// sample, and the current moving average\nvoid display() {\n    char scratch[64] = &amp;quot;&amp;quot;;\n    snprintf(scratch, sizeof(scratch), &amp;quot;count: %4d, sample: %4d, average: %3d\\n&amp;quot;,\n        average.get_count(),\n        sample,\n        (int) average());\n\n    Serial.print(scratch);\n}\n\n// This function is our callback function for any changes to\n// the running average. This gets registered with the library\n// and then automatically called as needed.\nvoid on_change(double const new_value) {\n    // We cast the value to an int everywhere in this example\n    // because we get multiple updates as the actual\n    // double (floating point) value changes.\n    // And we just want to see integer-level changes.\n    if (last != (int) new_value) {\n        last = (int) new_value;\n        Serial.print(&amp;quot;on_change(...): &amp;quot;);\n        display();\n    }\n}\n\n// This function is our callback function for changes to the\n// running average that go above the upper limit we set when\n// we registered this callback. This gets registered with the\n// library and then automatically called as needed.\nvoid on_upper(double const new_value) {\n    if (last != (int) new_value) {\n        last = (int) new_value;\n        Serial.print(&amp;quot;on_upper(...): &amp;quot;);\n        display();\n    }\n}\n\n\n// This function is our callback function for changes to the\n// running average that go below the lower limit we set when\n// we registered this callback. This gets registered with the\n// library and then automatically called as needed.\nvoid on_lower(double const new_value) {\n    if (last != (int) new_value) {\n        last = (int) new_value;\n        Serial.print(&amp;quot;on_lower(...): &amp;quot;);\n        display();\n    }\n}\n\nvoid setup() {\n    Serial.begin(115200);\n\n    // register our callback function(s)\n    average.set_change(on_change);\n//  average.set_upper(on_upper, 3);  // called when &amp;gt;= 3\n//  average.set_lower(on_upper, 1);  // called when &amp;lt;  1\n}\n\nvoid loop() {\n    // create a random -1, 0, or +1 value\n    int const updown = random(0, 3) - 1;\n\n    // move the simulated sample value up or down\n    sample += updown;\n\n    // add the sample to the running average.\n    // Note Below: It is during this update\n    // that our callbacks might be called:\n    average += sample;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;example &lt;code&gt;on_change(...)&lt;/code&gt; output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;on_change(...): count:    5, sample:    2, average:   1\non_change(...): count:   10, sample:    4, average:   2\non_change(...): count:   18, sample:    4, average:   3\non_change(...): count:   26, sample:    2, average:   2\non_change(...): count:   53, sample:    5, average:   3\non_change(...): count:   58, sample:    6, average:   4\non_change(...): count:   73, sample:    3, average:   3\non_change(...): count:   91, sample:    1, average:   2\non_change(...): count:  120, sample:    5, average:   3\non_change(...): count:  130, sample:    2, average:   2\non_change(...): count:  138, sample:    0, average:   1\non_change(...): count:  152, sample:    4, average:   2\non_change(...): count:  155, sample:    1, average:   1\non_change(...): count:  158, sample:    3, average:   2\non_change(...): count:  184, sample:    1, average:   1\non_change(...): count:  231, sample:   -1, average:   0\non_change(...): count:  242, sample:    2, average:   1\non_change(...): count:  244, sample:    0, average:   0\non_change(...): count:  255, sample:   -3, average:  -1\non_change(...): count:  259, sample:   -5, average:  -2\non_change(...): count:  265, sample:   -4, average:  -3\non_change(...): count:  271, sample:   -7, average:  -4\non_change(...): count:  277, sample:   -7, average:  -5\non_change(...): count:  281, sample:   -8, average:  -6\non_change(...): count:  319, sample:   -4, average:  -5\non_change(...): count:  336, sample:   -9, average:  -6\non_change(...): count:  341, sample:   -8, average:  -7\non_change(...): count:  347, sample:  -10, average:  -8\non_change(...): count:  360, sample:  -11, average:  -9\non_change(...): count:  366, sample:  -12, average: -10\non_change(...): count:  370, sample:  -14, average: -11\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example output for callbacks on just upper bounds &amp;gt;= 3 and lower bounds &amp;lt; 1:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;on_upper(...): count:   18, sample:    4, average:   3\non_upper(...): count:   58, sample:    6, average:   4\non_upper(...): count:   73, sample:    3, average:   3\non_lower(...): count:  231, sample:   -1, average:   0\non_lower(...): count:  255, sample:   -3, average:  -1\non_lower(...): count:  259, sample:   -5, average:  -2\non_lower(...): count:  265, sample:   -4, average:  -3\non_lower(...): count:  271, sample:   -7, average:  -4\non_lower(...): count:  277, sample:   -7, average:  -5\non_lower(...): count:  281, sample:   -8, average:  -6\non_lower(...): count:  319, sample:   -4, average:  -5\non_lower(...): count:  336, sample:   -9, average:  -6\non_lower(...): count:  341, sample:   -8, average:  -7\non_lower(...): count:  347, sample:  -10, average:  -8\non_lower(...): count:  360, sample:  -11, average:  -9\non_lower(...): count:  366, sample:  -12, average: -10\non_lower(...): count:  370, sample:  -14, average: -11\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Have fun!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ripred&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
      "likes": null,
      "suggested_sort": null,
      "banned_at_utc": null,
      "view_count": null,
      "archived": false,
      "no_follow": false,
      "is_crosspostable": false,
      "pinned": false,
      "over_18": false,
      "preview": {
        "images": [
          {
            "source": {
              "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?auto=webp&amp;s=348dc6ecdcc4597b55085e7e908c3bccb797cbc4",
              "width": 1200,
              "height": 600
            },
            "resolutions": [
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=634c51416b458fe89322ff33605aa86752ec1de7",
                "width": 108,
                "height": 54
              },
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=369b03d06c1597669625f975f203f9496776887c",
                "width": 216,
                "height": 108
              },
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e2a5fce07b42840765116501413fbbf680f2c60d",
                "width": 320,
                "height": 160
              },
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=15a839570da34358f61a13e4d7ae53df95690119",
                "width": 640,
                "height": 320
              },
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=372093350351550bc6fa25d2e3dbb3df14aff672",
                "width": 960,
                "height": 480
              },
              {
                "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=e370247d0d48afd607652a3adfaf721f9b8148f9",
                "width": 1080,
                "height": 540
              }
            ],
            "variants": {},
            "id": "w_rg3KRGDhiXp-LEZ57g_LmN3LFxjRTAmfBI3VuvggE"
          }
        ],
        "enabled": false
      },
      "all_awardings": [],
      "awarders": [],
      "media_only": false,
      "link_flair_template_id": "5157e812-c1d8-11ed-aa85-8a0e0e8df8e0",
      "can_gild": false,
      "spoiler": false,
      "locked": false,
      "author_flair_text": ":400K::Arduino_500k::600K::640K: My other dev board is a Porsche",
      "treatment_tags": [],
      "visited": false,
      "removed_by": null,
      "num_reports": null,
      "distinguished": null,
      "subreddit_id": "t5_2qknj",
      "author_is_blocked": false,
      "mod_reason_by": null,
      "removal_reason": null,
      "link_flair_background_color": "#3300ee",
      "id": "14dml07",
      "is_robot_indexable": true,
      "report_reasons": null,
      "author": "ripred3",
      "discussion_type": null,
      "num_comments": 0,
      "send_replies": true,
      "contest_mode": false,
      "mod_reports": [],
      "author_patreon_flair": false,
      "author_flair_text_color": "light",
      "permalink": "/r/arduino/comments/14dml07/updates_to_smooth_library/",
      "stickied": false,
      "url": "https://www.reddit.com/r/arduino/comments/14dml07/updates_to_smooth_library/",
      "subreddit_subscribers": 691390,
      "created_utc": 1687199547.0,
      "num_crossposts": 3,
      "media": null,
      "is_video": false
    }
  ],
  "created": 1687200733.0,
  "link_flair_type": "richtext",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.arduino",
  "allow_live_comments": false,
  "selftext_html": null,
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "url_overridden_by_dest": "/r/arduino/comments/14dml07/updates_to_smooth_library/",
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "preview": {
    "images": [
      {
        "source": {
          "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?auto=webp&amp;s=348dc6ecdcc4597b55085e7e908c3bccb797cbc4",
          "width": 1200,
          "height": 600
        },
        "resolutions": [
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=634c51416b458fe89322ff33605aa86752ec1de7",
            "width": 108,
            "height": 54
          },
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=369b03d06c1597669625f975f203f9496776887c",
            "width": 216,
            "height": 108
          },
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e2a5fce07b42840765116501413fbbf680f2c60d",
            "width": 320,
            "height": 160
          },
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=15a839570da34358f61a13e4d7ae53df95690119",
            "width": 640,
            "height": 320
          },
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=372093350351550bc6fa25d2e3dbb3df14aff672",
            "width": 960,
            "height": 480
          },
          {
            "url": "https://external-preview.redd.it/0gRzmsX8-hCKLvz2Hu4R8lQPFk5L_xLRrBApwdwvDio.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=e370247d0d48afd607652a3adfaf721f9b8148f9",
            "width": 1080,
            "height": 540
          }
        ],
        "variants": {},
        "id": "w_rg3KRGDhiXp-LEZ57g_LmN3LFxjRTAmfBI3VuvggE"
      }
    ],
    "enabled": false
  },
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "67fe8ba6-0578-11ed-a1f0-e2a331aeaf4a",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": ":snoo_facepalm:",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_6as6rv",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "#cc5289",
  "id": "14dn47q",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ripred3",
  "discussion_type": null,
  "num_comments": 0,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "crosspost_parent": "t3_14dml07",
  "author_flair_text_color": "dark",
  "permalink": "/r/ripred/comments/14dn47q/updates_to_smooth_library/",
  "stickied": false,
  "url": "/r/arduino/comments/14dml07/updates_to_smooth_library/",
  "subreddit_subscribers": 43,
  "created_utc": 1687200733.0,
  "num_crossposts": 0,
  "media": null,
  "is_video": false
}