{
  "approved_at_utc": null,
  "subreddit": "ripred",
  "selftext": "",
  "user_reports": [],
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "New Arduino Smooth Library",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "Library"
    }
  ],
  "subreddit_name_prefixed": "r/ripred",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": "",
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_14cl08q",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 1.0,
  "author_flair_background_color": "transparent",
  "subreddit_type": "public",
  "ups": 1,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": "9fa2ceaa-053c-11ed-bb97-124dff5ea4b4",
  "is_original_content": false,
  "author_fullname": "t2_adfkq",
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "Library",
  "can_mod_post": false,
  "score": 1,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "default",
  "edited": false,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "a": ":snoo_facepalm:",
      "e": "emoji",
      "u": "https://emoji.redditmedia.com/wzxf63qpaezz_t5_3nqvj/snoo_facepalm"
    }
  ],
  "gildings": {},
  "content_categories": null,
  "is_self": false,
  "mod_note": null,
  "crosspost_parent_list": [
    {
      "approved_at_utc": null,
      "subreddit": "arduino",
      "selftext": "Recently we had a post where the topic of filtering and smoothing came up. Since the subject of keeping a smooth running average comes up a lot I decided to place the algorithm into a class and make it available as an Arduino library. I wrapped it up and submitted a pull request with the [official Arduino library repository and it just completed.](https://www.arduinolibraries.info/libraries/smooth) \ud83d\ude04\n\nYou create the object and tell it what the running sample window size is. *Normally* you would implement this using an array of past sample values and divide the sum by the number of samples. *This object takes up 8 bytes no matter the window size.* **\ud83d\ude0e** *And there's no looping over past values. And no arrays.*\n\nThe big advantage of the algorithm used in the `Smooth` library is that it uses an exponential moving average to keep a running average ***instead of using an array*** and updating it and dividing the sum of the last N samples by N. *This saves tons of time and memory.* I have run standard deviation tests between both implementations and this accurately approximates the equivelant value for most hobby uses.\n\nAnother big advantage is that *the calculation is fast and constant time* with no looping regardless of the sample window size. Credit to our member and resident wizard u/stockvu who told me about this algorithm [here in this sub a year ago](https://www.reddit.com/r/arduino/comments/w10nr8/comment/igi4ij1/?utm_source=share&amp;utm_medium=web2x&amp;context=3).\n\nAnother advantage is that the way it is written you still get a valid average even before N samples have been added. The window size of N is completely configurable when the `Smooth` object is created as well as at runtime using the `set_window(int const size)` method. The object works natively with `double` values so it can accomodate pretty much every use case.\n\nThe library is named [Smooth](https://github.com/ripred/Smooth) and ~~will be available from within the IDE within 24 hours using~~ is available now(!) using`(ctrl/cmd) shift I` or it can be installed and used from the repository link above. Give the repo a star if you like it. Tested on  both the Nano and the new (unreleased) Uno R4 Minima as well. It is super useful for 'noisy' inputs especially things **like accelerometers**! Or **periodic peak levels on audio digital VU meters**!\n\nFor additional flexibility (as shown in the code below) the object also supports 2 operator overloads for `+=` and `()`. *That way I have two* `Smooth::`*operators.* ^(Sorry I'll see myself out...)\n\n***update***: Added support for change, upper bounds, and lower bounds callbacks! (not shown in code below)\n\nCheers!\n\n`ripred`\n\n    #include &lt;Arduino.h&gt;\n    #include &lt;Smooth.h&gt;\n    \n    #define  SMOOTHED_SAMPLE_SIZE  10\n    \n    // Smoothing average object\n    Smooth  average(SMOOTHED_SAMPLE_SIZE);\n    \n    // Simulated moving sample\n    int sample = 0;\n    \n    void setup() {\n        Serial.begin(115200);\n    }\n    \n    void loop() {\n        // get a random -1, 0, or +1 value\n        int const updown = random(0, 3) - 1;\n    \n        // move our sample up or down randomly\n        sample += updown;\n    \n        // add it to the running average\n        average += sample;                      // or average.add(sample)\n    \n        // display the results:\n        char scratch[64] = \"\";\n        snprintf(scratch, sizeof(scratch), \"count: %4d, sample: %3d, average: %3d\\n\",\n            average.get_count(),\n            updown,\n            (int) average());                   // or average.get_avg()\n    \n        Serial.print(scratch);\n    }\n\nexample output:\n\n    count:    1, sample:   0, average:   0\n    count:    2, sample:   0, average:   0\n    count:    3, sample:   1, average:   0\n    count:    4, sample:   2, average:   0\n    count:    5, sample:   2, average:   1\n    count:    6, sample:   3, average:   1\n    count:    7, sample:   2, average:   1\n    count:    8, sample:   3, average:   1\n    count:    9, sample:   4, average:   1\n    count:   10, sample:   4, average:   2\n    count:   11, sample:   3, average:   2\n    count:   12, sample:   4, average:   2\n    count:   13, sample:   3, average:   2\n    count:   14, sample:   4, average:   2\n    count:   15, sample:   3, average:   2\n    count:   16, sample:   4, average:   2\n    count:   17, sample:   4, average:   2\n    count:   18, sample:   4, average:   3\n    count:   19, sample:   4, average:   3\n    count:   20, sample:   4, average:   3\n    count:   21, sample:   3, average:   3\n    count:   22, sample:   3, average:   3\n    count:   23, sample:   2, average:   3\n    count:   24, sample:   3, average:   3\n    count:   25, sample:   3, average:   3\n    count:   26, sample:   2, average:   2\n    count:   27, sample:   1, average:   2\n    count:   28, sample:   0, average:   2\n    count:   29, sample:   1, average:   2\n    count:   30, sample:   1, average:   2\n    count:   31, sample:   1, average:   2\n    count:   32, sample:   2, average:   2\n    count:   33, sample:   3, average:   2\n    count:   34, sample:   3, average:   2\n    count:   35, sample:   4, average:   2\n    count:   36, sample:   3, average:   2\n    count:   37, sample:   3, average:   2\n    count:   38, sample:   3, average:   2\n    count:   39, sample:   2, average:   2\n\n&amp;#x200B;",
      "author_fullname": "t2_adfkq",
      "saved": false,
      "mod_reason_title": null,
      "gilded": 0,
      "clicked": false,
      "title": "New Arduino Smooth Library",
      "link_flair_richtext": [
        {
          "a": ":Libraries:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/s7x3w35qfkna1_t5_2qknj/Libraries"
        },
        {
          "e": "text",
          "t": " Libraries and  "
        },
        {
          "a": ":Algorithm:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/llmtcu1qfkna1_t5_2qknj/Algorithm"
        },
        {
          "e": "text",
          "t": " Algorithms "
        }
      ],
      "subreddit_name_prefixed": "r/arduino",
      "hidden": false,
      "pwls": 6,
      "link_flair_css_class": "",
      "downs": 0,
      "thumbnail_height": null,
      "top_awarded_type": null,
      "hide_score": false,
      "name": "t3_14cihez",
      "quarantine": false,
      "link_flair_text_color": "light",
      "upvote_ratio": 0.96,
      "author_flair_background_color": "#00a6a5",
      "subreddit_type": "public",
      "ups": 74,
      "total_awards_received": 0,
      "media_embed": {},
      "thumbnail_width": null,
      "author_flair_template_id": "5cb3c302-0ef5-11ed-b9fd-aab9a872a9c2",
      "is_original_content": false,
      "user_reports": [],
      "secure_media": null,
      "is_reddit_media_domain": false,
      "is_meta": false,
      "category": null,
      "secure_media_embed": {},
      "link_flair_text": ":Libraries: Libraries and  :Algorithm: Algorithms ",
      "can_mod_post": false,
      "score": 74,
      "approved_by": null,
      "is_created_from_ads_ui": false,
      "author_premium": false,
      "thumbnail": "self",
      "edited": 1687282401.0,
      "author_flair_css_class": null,
      "author_flair_richtext": [
        {
          "a": ":400K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/apsbyvbwmfe91_t5_2qknj/400K"
        },
        {
          "a": ":Arduino_500k:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/o5qzzwwkvk5a1_t5_2qknj/Arduino_500k"
        },
        {
          "a": ":600K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/z23hxjk4hpeb1_t5_2qknj/600K"
        },
        {
          "a": ":640K:",
          "e": "emoji",
          "u": "https://emoji.redditmedia.com/g9r24xjaydqc1_t5_2qknj/640K"
        },
        {
          "e": "text",
          "t": " My other dev board is a Porsche"
        }
      ],
      "gildings": {},
      "content_categories": null,
      "is_self": true,
      "mod_note": null,
      "created": 1687088878.0,
      "link_flair_type": "richtext",
      "wls": 6,
      "removed_by_category": null,
      "banned_by": null,
      "author_flair_type": "richtext",
      "domain": "self.arduino",
      "allow_live_comments": false,
      "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Recently we had a post where the topic of filtering and smoothing came up. Since the subject of keeping a smooth running average comes up a lot I decided to place the algorithm into a class and make it available as an Arduino library. I wrapped it up and submitted a pull request with the &lt;a href=\"https://www.arduinolibraries.info/libraries/smooth\"&gt;official Arduino library repository and it just completed.&lt;/a&gt; \ud83d\ude04&lt;/p&gt;\n\n&lt;p&gt;You create the object and tell it what the running sample window size is. &lt;em&gt;Normally&lt;/em&gt; you would implement this using an array of past sample values and divide the sum by the number of samples. &lt;em&gt;This object takes up 8 bytes no matter the window size.&lt;/em&gt; &lt;strong&gt;\ud83d\ude0e&lt;/strong&gt; &lt;em&gt;And there&amp;#39;s no looping over past values. And no arrays.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;The big advantage of the algorithm used in the &lt;code&gt;Smooth&lt;/code&gt; library is that it uses an exponential moving average to keep a running average &lt;strong&gt;&lt;em&gt;instead of using an array&lt;/em&gt;&lt;/strong&gt; and updating it and dividing the sum of the last N samples by N. &lt;em&gt;This saves tons of time and memory.&lt;/em&gt; I have run standard deviation tests between both implementations and this accurately approximates the equivelant value for most hobby uses.&lt;/p&gt;\n\n&lt;p&gt;Another big advantage is that &lt;em&gt;the calculation is fast and constant time&lt;/em&gt; with no looping regardless of the sample window size. Credit to our member and resident wizard &lt;a href=\"/u/stockvu\"&gt;u/stockvu&lt;/a&gt; who told me about this algorithm &lt;a href=\"https://www.reddit.com/r/arduino/comments/w10nr8/comment/igi4ij1/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3\"&gt;here in this sub a year ago&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Another advantage is that the way it is written you still get a valid average even before N samples have been added. The window size of N is completely configurable when the &lt;code&gt;Smooth&lt;/code&gt; object is created as well as at runtime using the &lt;code&gt;set_window(int const size)&lt;/code&gt; method. The object works natively with &lt;code&gt;double&lt;/code&gt; values so it can accomodate pretty much every use case.&lt;/p&gt;\n\n&lt;p&gt;The library is named &lt;a href=\"https://github.com/ripred/Smooth\"&gt;Smooth&lt;/a&gt; and &lt;del&gt;will be available from within the IDE within 24 hours using&lt;/del&gt; is available now(!) using&lt;code&gt;(ctrl/cmd) shift I&lt;/code&gt; or it can be installed and used from the repository link above. Give the repo a star if you like it. Tested on  both the Nano and the new (unreleased) Uno R4 Minima as well. It is super useful for &amp;#39;noisy&amp;#39; inputs especially things &lt;strong&gt;like accelerometers&lt;/strong&gt;! Or &lt;strong&gt;periodic peak levels on audio digital VU meters&lt;/strong&gt;!&lt;/p&gt;\n\n&lt;p&gt;For additional flexibility (as shown in the code below) the object also supports 2 operator overloads for &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt;. &lt;em&gt;That way I have two&lt;/em&gt; &lt;code&gt;Smooth::&lt;/code&gt;&lt;em&gt;operators.&lt;/em&gt; &lt;sup&gt;Sorry I&amp;#39;ll see myself out...&lt;/sup&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;update&lt;/em&gt;&lt;/strong&gt;: Added support for change, upper bounds, and lower bounds callbacks! (not shown in code below)&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ripred&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;Arduino.h&amp;gt;\n#include &amp;lt;Smooth.h&amp;gt;\n\n#define  SMOOTHED_SAMPLE_SIZE  10\n\n// Smoothing average object\nSmooth  average(SMOOTHED_SAMPLE_SIZE);\n\n// Simulated moving sample\nint sample = 0;\n\nvoid setup() {\n    Serial.begin(115200);\n}\n\nvoid loop() {\n    // get a random -1, 0, or +1 value\n    int const updown = random(0, 3) - 1;\n\n    // move our sample up or down randomly\n    sample += updown;\n\n    // add it to the running average\n    average += sample;                      // or average.add(sample)\n\n    // display the results:\n    char scratch[64] = &amp;quot;&amp;quot;;\n    snprintf(scratch, sizeof(scratch), &amp;quot;count: %4d, sample: %3d, average: %3d\\n&amp;quot;,\n        average.get_count(),\n        updown,\n        (int) average());                   // or average.get_avg()\n\n    Serial.print(scratch);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;example output:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;count:    1, sample:   0, average:   0\ncount:    2, sample:   0, average:   0\ncount:    3, sample:   1, average:   0\ncount:    4, sample:   2, average:   0\ncount:    5, sample:   2, average:   1\ncount:    6, sample:   3, average:   1\ncount:    7, sample:   2, average:   1\ncount:    8, sample:   3, average:   1\ncount:    9, sample:   4, average:   1\ncount:   10, sample:   4, average:   2\ncount:   11, sample:   3, average:   2\ncount:   12, sample:   4, average:   2\ncount:   13, sample:   3, average:   2\ncount:   14, sample:   4, average:   2\ncount:   15, sample:   3, average:   2\ncount:   16, sample:   4, average:   2\ncount:   17, sample:   4, average:   2\ncount:   18, sample:   4, average:   3\ncount:   19, sample:   4, average:   3\ncount:   20, sample:   4, average:   3\ncount:   21, sample:   3, average:   3\ncount:   22, sample:   3, average:   3\ncount:   23, sample:   2, average:   3\ncount:   24, sample:   3, average:   3\ncount:   25, sample:   3, average:   3\ncount:   26, sample:   2, average:   2\ncount:   27, sample:   1, average:   2\ncount:   28, sample:   0, average:   2\ncount:   29, sample:   1, average:   2\ncount:   30, sample:   1, average:   2\ncount:   31, sample:   1, average:   2\ncount:   32, sample:   2, average:   2\ncount:   33, sample:   3, average:   2\ncount:   34, sample:   3, average:   2\ncount:   35, sample:   4, average:   2\ncount:   36, sample:   3, average:   2\ncount:   37, sample:   3, average:   2\ncount:   38, sample:   3, average:   2\ncount:   39, sample:   2, average:   2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
      "likes": null,
      "suggested_sort": null,
      "banned_at_utc": null,
      "view_count": null,
      "archived": false,
      "no_follow": false,
      "is_crosspostable": false,
      "pinned": false,
      "over_18": false,
      "all_awardings": [],
      "awarders": [],
      "media_only": false,
      "link_flair_template_id": "5157e812-c1d8-11ed-aa85-8a0e0e8df8e0",
      "can_gild": false,
      "spoiler": false,
      "locked": false,
      "author_flair_text": ":400K::Arduino_500k::600K::640K: My other dev board is a Porsche",
      "treatment_tags": [],
      "visited": false,
      "removed_by": null,
      "num_reports": null,
      "distinguished": null,
      "subreddit_id": "t5_2qknj",
      "author_is_blocked": false,
      "mod_reason_by": null,
      "removal_reason": null,
      "link_flair_background_color": "#3300ee",
      "id": "14cihez",
      "is_robot_indexable": true,
      "report_reasons": null,
      "author": "ripred3",
      "discussion_type": null,
      "num_comments": 23,
      "send_replies": true,
      "contest_mode": false,
      "mod_reports": [],
      "author_patreon_flair": false,
      "author_flair_text_color": "light",
      "permalink": "/r/arduino/comments/14cihez/new_arduino_smooth_library/",
      "stickied": false,
      "url": "https://www.reddit.com/r/arduino/comments/14cihez/new_arduino_smooth_library/",
      "subreddit_subscribers": 691390,
      "created_utc": 1687088878.0,
      "num_crossposts": 3,
      "media": null,
      "is_video": false
    }
  ],
  "created": 1687096272.0,
  "link_flair_type": "richtext",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.arduino",
  "allow_live_comments": false,
  "selftext_html": null,
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "url_overridden_by_dest": "/r/arduino/comments/14cihez/new_arduino_smooth_library/",
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "67fe8ba6-0578-11ed-a1f0-e2a331aeaf4a",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": ":snoo_facepalm:",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_6as6rv",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "#cc5289",
  "id": "14cl08q",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ripred3",
  "discussion_type": null,
  "num_comments": 0,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "crosspost_parent": "t3_14cihez",
  "author_flair_text_color": "dark",
  "permalink": "/r/ripred/comments/14cl08q/new_arduino_smooth_library/",
  "stickied": false,
  "url": "/r/arduino/comments/14cihez/new_arduino_smooth_library/",
  "subreddit_subscribers": 43,
  "created_utc": 1687096272.0,
  "num_crossposts": 0,
  "media": null,
  "is_video": false
}