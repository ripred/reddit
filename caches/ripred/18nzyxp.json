{
  "approved_at_utc": null,
  "subreddit": "ripred",
  "selftext": "project github repository: [https://github.com/ripred/ArduinoCLI](https://github.com/ripred/ArduinoCLI)\n\n# The current version\n\nSo, the existing mechanism for the Arduino to say \"Hey do this command\" and have it executed by the host PC/Mac/Linux host and then retrieve the results is working out to be fantastic. 10 separate uses for the mechanism are already in the [PublicGallery](https://github.com/ripred/ArduinoCLI/PublicGallery) now. This includes a variety of cool examples like having the host be a proxy for the internet or allowing the Arduino to tell the host to reboot or go to sleep. \ud83d\ude0e Even control your Hue Bridge and lighting system from a simple Nano with no WiFi or ethernet modules of any kind.\n\n**A new Macro subsystem** has been added to the Python Agent that allows the agent to remember a set of key/value pairs that can be used to allow the Arduino to invoke large complex commands with just a short command key phrase. The list of macros can be added to, deleted, and executed by the Arduino using three new keywords: `list_macros`, `add_macro:key:value`, and `delete_macro:key`. The Python Agent loads the macros from the text file \"macros.txt\" in its current directory and saves the current list of macros when the program exits when the user hits ctrl-c:\n\n# The self-programming Arduino\n\nSince the Arduino can create files on the host machine and do things with them using this kind of idiom:\n\n        Serial.println(\"echo '' &gt; file.txt\");\n        Serial.println(\"echo 'line one' &gt;&gt; file.txt\");\n        Serial.println(\"echo 'line two' &gt;&gt; file.txt\");\n        Serial.println(\"echo 'line three' &gt;&gt; file.txt\");\n    \n        Serial.println(\"type file.txt\");             // or \"cat file.txt\" \ud83d\ude09\n\nthat means we can create any file we need on the host machine, execute the file or have something else run that uses the file as an input, and the remove the file when we're done. That's pretty cool.\n\nThen I thought \"*what if we sent the following file...*\"\n\n        Serial.println(\"echo '' &gt; new_sketch.ino\");\n        Serial.println(\"echo 'void setup() {' &gt;&gt; new_sketch.ino\");\n        Serial.println(\"echo '    Serial.begin(115200);' &gt;&gt; new_sketch.ino\");\n        Serial.println(\"echo '    Serial.println(\\\"hello, arduino\\\");' &gt;&gt; new_sketch.ino\");\n        Serial.println(\"echo '}' &gt;&gt; new_sketch.ino\");\n        Serial.println(\"echo 'void loop() { }' &gt;&gt; new_sketch.ino\");\n\n\"*...and then issued the same commands to compile the file for the Arduino platform that are used by the IDE in the background?!*\":\n\n    avr-gcc -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto\n     -fno-fat-lto-objects -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10813\n     -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR \"-I[path_to_Arduino_installation]/hardware\n    /arduino/avr/cores/arduino\" \"-I[path_to_Arduino_installation]/hardware/arduino\n    /avr/variants/standard\" \"path_to_your_sketch_directory/new_sketch.ino.cpp\" -o\n     \"path_to_your_sketch_directory/new_sketch.ino.cpp.o\"\n\nand then uploaded it:\n\n    avrdude -C [path_to_Arduino_installation]/hardware/tools/avr/etc/avrdude.conf -v \n    -patmega328p -carduino -P COM3 -b 115200 -D \n    -Uflash:w:path_to_your_sketch_directory/new_sketch.ino.hex:i\n\nThat would completely erase the program that issued those commands and replace the current sketch that was in flash memory with a new sketch that opened the Serial port using 115200 baud, and sends \"hello, arduino\" out of the serial port to be seen in the Serial monitor.  &lt;/insert evil laugh&gt;\n\nThere just happens to be a set of Arduino Command Line Tools that you can download and install. These tools make it much easier to compile programs and upload them to an Arduino from the command line. Unfortunately I named my project `ArduinoCLI` and the Arduino command line tools are invoked using `arduino-cli` so I may be renaming this project soon.\n\n# The Infinite Arduino\n\nSo I hope you can see where I'm going with this.\n\nIf you wanted to write a huge Arduino program that was comprised of hundreds of thousands of line of code in the Arduino project, as long as you break the project application down into a finite number of states then we can already have all of the code written or generated, that would each represent one state in the larger overall system.\n\nWe can have an immensely large (constrained by drive space) Arduino application that, as long as no context or 'state' took up 32K of flash and 2K of ram: The same limitations that we have to live by period, then the overall system could be uploaded piece by piece on-demand as needed by the currently running state on the microcontroller at the time.\n\nYou could have dozens of Arduino sketches linked to each other one after another as a set of tutorials.\n\nEach existing tutorial would only need to have the addition of the ArduinoCLI interface and then display a menu to the user in the serial monitor:\n\n    01: Example1.ino\n    02: Example2.ino\n    03: Example3.ino\n\nAs long as the proper \"macros.txt\" file was configured and ready to translate the \"01\", \"02\"... macros then the user could run any example sketch they wanted to next, and it would just take the place of the current sketch and run.\n\n~~This ability to switch into \"state-machine\" mode is about to be implemented in order to explore what could be done.~~ \ud83e\udd14\n\n**Update:**  It's all in there as of today! (Dec 22, 2023)\n\nAll commands sent to the Python Host now **must** begin with a single byte ***command id***. The following prefixing id's are recognized and used:\n\n* **!** execute the command following the bang as in `!echo 'hello, arduino'`.\n* **@** manage the macros using the following keywords:\n\n1. `@list_macros`\n2. `@add_macro:key:command` as in `@add_macro:sayhi:echo 'hello, arduino'`\n3. `@sayhi`\n4. `@delete_macro:key` as in `@delete_macro:sayhi`\n\n* **&amp;** compile and upload a sketch on the host machine, replacing the existing sketch on the Arduino as in `&amp;blink`.\n* \\# send serial text to be displayed on the host output like you would normally use `Serial.printxx(...)` as in `#This is some text to be displayed on the terminal output`.\n\nCheers!\n\n`ripred`",
  "author_fullname": "t2_adfkq",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "The Infinite Arduino - ArduinoCLI Update Notes",
  "link_flair_richtext": [
    {
      "e": "text",
      "t": "Project Update:"
    }
  ],
  "subreddit_name_prefixed": "r/ripred",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": "",
  "downs": 0,
  "thumbnail_height": 70,
  "top_awarded_type": null,
  "hide_score": false,
  "media_metadata": {
    "6vg9avtl7q7c1": {
      "status": "valid",
      "e": "Image",
      "m": "image/png",
      "p": [
        {
          "y": 112,
          "x": 108,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=8c387a7213b475376dbeae0877fec7ab189fd532"
        },
        {
          "y": 224,
          "x": 216,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=60a9cde005cc29eaa3c63ca65ef7dde3dc79df55"
        },
        {
          "y": 332,
          "x": 320,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=cb472550abae16a393ecc318bf88dcdda385ca5b"
        },
        {
          "y": 665,
          "x": 640,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=3f720c0f593b3f3ab726f4e13c0341158406539f"
        },
        {
          "y": 998,
          "x": 960,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=3679924ed9b32bdfda21aa115a5f3a19cc63b5ed"
        },
        {
          "y": 1123,
          "x": 1080,
          "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0e1605f3489c80913073892f1d9ddaea2080531f"
        }
      ],
      "s": {
        "y": 1756,
        "x": 1688,
        "u": "https://preview.redd.it/6vg9avtl7q7c1.png?width=1688&amp;format=png&amp;auto=webp&amp;s=332caa09afcc6001fa0d6aa85e767317ac292b87"
      },
      "id": "6vg9avtl7q7c1"
    }
  },
  "name": "t3_18nzyxp",
  "quarantine": false,
  "link_flair_text_color": "light",
  "upvote_ratio": 1.0,
  "author_flair_background_color": "transparent",
  "ups": 2,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": 140,
  "author_flair_template_id": "9fa2ceaa-053c-11ed-bb97-124dff5ea4b4",
  "is_original_content": false,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": "Project Update:",
  "can_mod_post": false,
  "score": 2,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "https://b.thumbs.redditmedia.com/OX9a3OqpnWOwXc4z-puz1vSs4r4UzZRVDwk_GUMVgws.jpg",
  "edited": 1704273574.0,
  "author_flair_css_class": null,
  "author_flair_richtext": [
    {
      "a": ":snoo_facepalm:",
      "e": "emoji",
      "u": "https://emoji.redditmedia.com/wzxf63qpaezz_t5_3nqvj/snoo_facepalm"
    }
  ],
  "gildings": {},
  "post_hint": "self",
  "content_categories": null,
  "is_self": true,
  "subreddit_type": "public",
  "created": 1703199780.0,
  "link_flair_type": "richtext",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "richtext",
  "domain": "self.ripred",
  "allow_live_comments": false,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;project github repository: &lt;a href=\"https://github.com/ripred/ArduinoCLI\"&gt;https://github.com/ripred/ArduinoCLI&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;The current version&lt;/h1&gt;\n\n&lt;p&gt;So, the existing mechanism for the Arduino to say &amp;quot;Hey do this command&amp;quot; and have it executed by the host PC/Mac/Linux host and then retrieve the results is working out to be fantastic. 10 separate uses for the mechanism are already in the &lt;a href=\"https://github.com/ripred/ArduinoCLI/PublicGallery\"&gt;PublicGallery&lt;/a&gt; now. This includes a variety of cool examples like having the host be a proxy for the internet or allowing the Arduino to tell the host to reboot or go to sleep. \ud83d\ude0e Even control your Hue Bridge and lighting system from a simple Nano with no WiFi or ethernet modules of any kind.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;A new Macro subsystem&lt;/strong&gt; has been added to the Python Agent that allows the agent to remember a set of key/value pairs that can be used to allow the Arduino to invoke large complex commands with just a short command key phrase. The list of macros can be added to, deleted, and executed by the Arduino using three new keywords: &lt;code&gt;list_macros&lt;/code&gt;, &lt;code&gt;add_macro:key:value&lt;/code&gt;, and &lt;code&gt;delete_macro:key&lt;/code&gt;. The Python Agent loads the macros from the text file &amp;quot;macros.txt&amp;quot; in its current directory and saves the current list of macros when the program exits when the user hits ctrl-c:&lt;/p&gt;\n\n&lt;h1&gt;The self-programming Arduino&lt;/h1&gt;\n\n&lt;p&gt;Since the Arduino can create files on the host machine and do things with them using this kind of idiom:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    Serial.println(&amp;quot;echo &amp;#39;&amp;#39; &amp;gt; file.txt&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;line one&amp;#39; &amp;gt;&amp;gt; file.txt&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;line two&amp;#39; &amp;gt;&amp;gt; file.txt&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;line three&amp;#39; &amp;gt;&amp;gt; file.txt&amp;quot;);\n\n    Serial.println(&amp;quot;type file.txt&amp;quot;);             // or &amp;quot;cat file.txt&amp;quot; \ud83d\ude09\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;that means we can create any file we need on the host machine, execute the file or have something else run that uses the file as an input, and the remove the file when we&amp;#39;re done. That&amp;#39;s pretty cool.&lt;/p&gt;\n\n&lt;p&gt;Then I thought &amp;quot;&lt;em&gt;what if we sent the following file...&lt;/em&gt;&amp;quot;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    Serial.println(&amp;quot;echo &amp;#39;&amp;#39; &amp;gt; new_sketch.ino&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;void setup() {&amp;#39; &amp;gt;&amp;gt; new_sketch.ino&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;    Serial.begin(115200);&amp;#39; &amp;gt;&amp;gt; new_sketch.ino&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;    Serial.println(\\&amp;quot;hello, arduino\\&amp;quot;);&amp;#39; &amp;gt;&amp;gt; new_sketch.ino&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;}&amp;#39; &amp;gt;&amp;gt; new_sketch.ino&amp;quot;);\n    Serial.println(&amp;quot;echo &amp;#39;void loop() { }&amp;#39; &amp;gt;&amp;gt; new_sketch.ino&amp;quot;);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;quot;&lt;em&gt;...and then issued the same commands to compile the file for the Arduino platform that are used by the IDE in the background?!&lt;/em&gt;&amp;quot;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;avr-gcc -c -g -Os -w -std=gnu11 -ffunction-sections -fdata-sections -MMD -flto\n -fno-fat-lto-objects -mmcu=atmega328p -DF_CPU=16000000L -DARDUINO=10813\n -DARDUINO_AVR_UNO -DARDUINO_ARCH_AVR &amp;quot;-I[path_to_Arduino_installation]/hardware\n/arduino/avr/cores/arduino&amp;quot; &amp;quot;-I[path_to_Arduino_installation]/hardware/arduino\n/avr/variants/standard&amp;quot; &amp;quot;path_to_your_sketch_directory/new_sketch.ino.cpp&amp;quot; -o\n &amp;quot;path_to_your_sketch_directory/new_sketch.ino.cpp.o&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then uploaded it:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;avrdude -C [path_to_Arduino_installation]/hardware/tools/avr/etc/avrdude.conf -v \n-patmega328p -carduino -P COM3 -b 115200 -D \n-Uflash:w:path_to_your_sketch_directory/new_sketch.ino.hex:i\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That would completely erase the program that issued those commands and replace the current sketch that was in flash memory with a new sketch that opened the Serial port using 115200 baud, and sends &amp;quot;hello, arduino&amp;quot; out of the serial port to be seen in the Serial monitor.  &amp;lt;/insert evil laugh&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;There just happens to be a set of Arduino Command Line Tools that you can download and install. These tools make it much easier to compile programs and upload them to an Arduino from the command line. Unfortunately I named my project &lt;code&gt;ArduinoCLI&lt;/code&gt; and the Arduino command line tools are invoked using &lt;code&gt;arduino-cli&lt;/code&gt; so I may be renaming this project soon.&lt;/p&gt;\n\n&lt;h1&gt;The Infinite Arduino&lt;/h1&gt;\n\n&lt;p&gt;So I hope you can see where I&amp;#39;m going with this.&lt;/p&gt;\n\n&lt;p&gt;If you wanted to write a huge Arduino program that was comprised of hundreds of thousands of line of code in the Arduino project, as long as you break the project application down into a finite number of states then we can already have all of the code written or generated, that would each represent one state in the larger overall system.&lt;/p&gt;\n\n&lt;p&gt;We can have an immensely large (constrained by drive space) Arduino application that, as long as no context or &amp;#39;state&amp;#39; took up 32K of flash and 2K of ram: The same limitations that we have to live by period, then the overall system could be uploaded piece by piece on-demand as needed by the currently running state on the microcontroller at the time.&lt;/p&gt;\n\n&lt;p&gt;You could have dozens of Arduino sketches linked to each other one after another as a set of tutorials.&lt;/p&gt;\n\n&lt;p&gt;Each existing tutorial would only need to have the addition of the ArduinoCLI interface and then display a menu to the user in the serial monitor:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;01: Example1.ino\n02: Example2.ino\n03: Example3.ino\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As long as the proper &amp;quot;macros.txt&amp;quot; file was configured and ready to translate the &amp;quot;01&amp;quot;, &amp;quot;02&amp;quot;... macros then the user could run any example sketch they wanted to next, and it would just take the place of the current sketch and run.&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;This ability to switch into &amp;quot;state-machine&amp;quot; mode is about to be implemented in order to explore what could be done.&lt;/del&gt; \ud83e\udd14&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;  It&amp;#39;s all in there as of today! (Dec 22, 2023)&lt;/p&gt;\n\n&lt;p&gt;All commands sent to the Python Host now &lt;strong&gt;must&lt;/strong&gt; begin with a single byte &lt;strong&gt;&lt;em&gt;command id&lt;/em&gt;&lt;/strong&gt;. The following prefixing id&amp;#39;s are recognized and used:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;!&lt;/strong&gt; execute the command following the bang as in &lt;code&gt;!echo &amp;#39;hello, arduino&amp;#39;&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;@&lt;/strong&gt; manage the macros using the following keywords:&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;@list_macros&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;@add_macro:key:command&lt;/code&gt; as in &lt;code&gt;@add_macro:sayhi:echo &amp;#39;hello, arduino&amp;#39;&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;@sayhi&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;@delete_macro:key&lt;/code&gt; as in &lt;code&gt;@delete_macro:sayhi&lt;/code&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;&amp;amp;&lt;/strong&gt; compile and upload a sketch on the host machine, replacing the existing sketch on the Arduino as in &lt;code&gt;&amp;amp;blink&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;# send serial text to be displayed on the host output like you would normally use &lt;code&gt;Serial.printxx(...)&lt;/code&gt; as in &lt;code&gt;#This is some text to be displayed on the terminal output&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ripred&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": false,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "preview": {
    "images": [
      {
        "source": {
          "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?auto=webp&amp;s=b43009a636db25fdef6514598fb36173e9feb670",
          "width": 1200,
          "height": 600
        },
        "resolutions": [
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b90f146f5d7eb7dc2c1cba95cee0b5fcd6c725d3",
            "width": 108,
            "height": 54
          },
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=68e7ab6bdb41bfbe5013481f18811970eaafb093",
            "width": 216,
            "height": 108
          },
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e4d5ef52307cbede1e09535e0c653119f63c8470",
            "width": 320,
            "height": 160
          },
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a657554a1013c90d09eb54a8cb14dea64b67e5fb",
            "width": 640,
            "height": 320
          },
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4aad7ebf91c497b01f09c62e28d6a930e5d68a3a",
            "width": 960,
            "height": 480
          },
          {
            "url": "https://external-preview.redd.it/UF48LOiBkeORupxeupjcdjAPV6EfXj6D6FNGvRoOjSk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d16a6731d287ade95ff5c07da61e98c38d98b97b",
            "width": 1080,
            "height": 540
          }
        ],
        "variants": {},
        "id": "FDbssiVbDqcMCY6cq-5uT86lYndtJ4DrIxkGpT2mHS4"
      }
    ],
    "enabled": false
  },
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "link_flair_template_id": "5bfb5318-a03e-11ee-adc5-42b05cf4a7d6",
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": ":snoo_facepalm:",
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "mod_note": null,
  "distinguished": null,
  "subreddit_id": "t5_6as6rv",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "num_reports": null,
  "removal_reason": null,
  "link_flair_background_color": "#8242ff",
  "id": "18nzyxp",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "ripred3",
  "discussion_type": null,
  "num_comments": 0,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": "dark",
  "permalink": "/r/ripred/comments/18nzyxp/the_infinite_arduino_arduinocli_update_notes/",
  "stickied": false,
  "url": "https://www.reddit.com/r/ripred/comments/18nzyxp/the_infinite_arduino_arduinocli_update_notes/",
  "subreddit_subscribers": 43,
  "created_utc": 1703199780.0,
  "num_crossposts": 2,
  "media": null,
  "is_video": false
}