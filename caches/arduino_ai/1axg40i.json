{
  "approved_at_utc": null,
  "subreddit": "Arduino_AI",
  "selftext": "I have this code that uses an ESP32-CAM for face recognition and when a smile is detected it takes a capture and sends it to my phone via Line notifications. I want to modify the code so that it sends a capture via Line when a face is detected. Can I have some help please? \n\n    \n    //Line Notify (Smile)\n        if (P1==\"happy\" || P1==\"neutral\" || P1==\"sad\" || P1==\"angry\" || P1==\"fearful\"  || P1==\"disgusted\"|| P1==\"surprised\") {\n          Serial.println(\"\");\n          sendCapturedImage2LineNotify(lineNotifyToken);\n        }\n      } else if (cmd==\"resetwifi\") {  //\u91cd\u8a2d\u7db2\u8def\u9023\u7dda  \n        for (int i=0;i&lt;2;i++) {\n          WiFi.begin(P1.c_str(), P2.c_str());\n          Serial.print(\"Connecting to \");\n          Serial.println(P1);\n          long int StartTime=millis();\n          while (WiFi.status() != WL_CONNECTED) {\n              delay(500);\n              if ((StartTime+5000) &lt; millis()) break;\n          } \n          Serial.println(\"\");\n          Serial.println(\"STAIP: \"+WiFi.localIP().toString());\n          Feedback=\"STAIP: \"+WiFi.localIP().toString();\n    \n          if (WiFi.status() == WL_CONNECTED) {\n            WiFi.softAP((WiFi.localIP().toString()+\"_\"+P1).c_str(), P2.c_str());\n            for (int i=0;i&lt;2;i++) {    //\u82e5\u9023\u4e0d\u4e0aWIFI\u8a2d\u5b9a\u9583\u5149\u71c8\u6162\u901f\u9583\u720d\n              ledcWrite(4,10);\n              delay(300);\n              ledcWrite(4,0);\n              delay(300);    \n            }\n            break;\n          }\n        }\n      } else if (cmd==\"framesize\") {\n        int val = P1.toInt();\n        sensor_t * s = esp_camera_sensor_get(); \n        s-&gt;set_framesize(s, (framesize_t)val);    \n      } else if (cmd==\"quality\") { //\u756b\u8cea\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_quality(s, P1.toInt());     \n      } else if (cmd==\"contrast\") {  //\u5c0d\u6bd4\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_contrast(s, P1.toInt());          \n      } else if (cmd==\"brightness\") {  //\u4eae\u5ea6\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_brightness(s, P1.toInt());   \n      } else if (cmd==\"saturation\") {  //\u98fd\u548c\u5ea6\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_saturation(s, P1.toInt());          \n      } else if (cmd==\"special_effect\") {  //\u7279\u6548\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_special_effect(s, P1.toInt());  \n      } else if (cmd==\"hmirror\") {  //\u6c34\u5e73\u93e1\u50cf\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_hmirror(s, P1.toInt());  \n      } else if (cmd==\"vflip\") {  //\u5782\u76f4\u7ffb\u8f49\n        sensor_t * s = esp_camera_sensor_get();\n        s-&gt;set_vflip(s, P1.toInt());  \n      } else {\n        Feedback=\"Command is not defined.\";\n      }\n      if (Feedback==\"\") Feedback=Command;  \n    }\n    \n    //\u62c6\u89e3\u547d\u4ee4\u5b57\u4e32\u7f6e\u5165\u8b8a\u6578\n    void getCommand(char c)\n    {\n      if (c=='?') ReceiveState=1;\n      if ((c==' ')||(c=='\\r')||(c=='\\n')) ReceiveState=0;\n      \n      if (ReceiveState==1)\n      {\n        Command=Command+String(c);\n        \n        if (c=='=') cmdState=0;\n        if (c==';') strState++;\n      \n        if ((cmdState==1)&amp;&amp;((c!='?')||(questionstate==1))) cmd=cmd+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==1)&amp;&amp;((c!='=')||(equalstate==1))) P1=P1+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==2)&amp;&amp;(c!=';')) P2=P2+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==3)&amp;&amp;(c!=';')) P3=P3+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==4)&amp;&amp;(c!=';')) P4=P4+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==5)&amp;&amp;(c!=';')) P5=P5+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==6)&amp;&amp;(c!=';')) P6=P6+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==7)&amp;&amp;(c!=';')) P7=P7+String(c);\n        if ((cmdState==0)&amp;&amp;(strState==8)&amp;&amp;(c!=';')) P8=P8+String(c);\n        if ((cmdState==0)&amp;&amp;(strState&gt;=9)&amp;&amp;((c!=';')||(semicolonstate==1))) P9=P9+String(c);\n            const aiView = document.getElementById('stream')\n            const aiStill = document.getElementById('get-still')\n            const canvas = document.getElementById('canvas')     \n            var context = canvas.getContext(\"2d\");  \n            const message = document.getElementById('message');\n            const uart = document.getElementById('uart');\n            const chkResult = document.getElementById('chkResult');\n            const probability = document.getElementById('probability')\n            var res = \"\";\n    \n            //Model: https://github.com/fustyles/webduino/tree/master/TensorFlow/Face-api\n            const modelPath = 'https://fustyles.github.io/webduino/TensorFlow/Face-api/';\n            let currentStream;\n            let displaySize = { width:320, height: 240 }\n            let faceDetection;\n            \n            Promise.all([\n              faceapi.nets.tinyFaceDetector.load(modelPath),\n              faceapi.nets.faceLandmark68TinyNet.load(modelPath),\n              faceapi.nets.faceRecognitionNet.load(modelPath),\n              faceapi.nets.faceExpressionNet.load(modelPath),\n              faceapi.nets.ageGenderNet.load(modelPath)          \n            ]).then(function(){\n              message.innerHTML = \"\";\n              aiStill.click();\n            })  \n            \n            async function DetectImage() {\n              canvas.setAttribute(\"width\", aiView.width);\n              canvas.setAttribute(\"height\", aiView.height);\n              context.drawImage(aiView, 0, 0, aiView.width, aiView.height); \n              if (!chkResult.checked) message.innerHTML = \"\";\n                    \n              const detections = await faceapi.detectAllFaces(canvas, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks(true).withFaceExpressions().withAgeAndGender()\n              const resizedDetections = faceapi.resizeResults(detections, displaySize)\n              faceapi.draw.drawDetections(canvas, resizedDetections)\n              faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)\n              faceapi.draw.drawFaceExpressions(canvas, resizedDetections)\n              resizedDetections.forEach(result =&gt; {\n                const { detection,expressions,gender,genderProbability,age } = result\n                //message.innerHTML = JSON.stringify(result);\n    \n                res = \"\";\n                var i=0;\n                var maxEmotion=\"neutral\";\n                var maxProbability=expressions.neutral;\n                if (expressions.happy&gt;maxProbability) {\n                  maxProbability=expressions.happy;\n                  maxEmotion=\"happy\";\n                }\n                if (expressions.sad&gt;maxProbability) {\n                  maxProbability=expressions.sad;\n                  maxEmotion=\"sad\";\n                }\n                if (expressions.angry&gt;maxProbability) {\n                  maxProbability=expressions.angry;\n                  maxEmotion=\"angry\";\n                }\n                if (expressions.fearful&gt;maxProbability) {\n                  maxProbability=expressions.fearful;\n                  maxEmotion=\"fearful\";\n                }\n                if (expressions.disgusted&gt;maxProbability) {\n                  maxProbability=expressions.disgusted;\n                  maxEmotion=\"disgusted\";\n                }\n                if (expressions.surprised&gt;maxProbability) {\n                  maxProbability=expressions.surprised;\n                  maxEmotion=\"surprised\";\n                }\n    \n                if (uart.checked) {\n                  //\u7576\u53ef\u80fd\u6027\u6700\u5927\u7684\u8868\u60c5\u662fhappy\u6642\n                  //if ((maxEmotion==\"happy\"||maxEmotion=\"neutral\"||maxEmotion=\"sad\" ||maxEmotion=\"angry\" ||maxEmotion=\"fearful\" ||maxEmotion=\"disgusted\" ||maxEmotion=\"surprised\")&amp;&amp;maxProbability&gt;=Number(probability.value)) {\n                  if (maxEmotion==\"happy\" &amp;&amp;maxProbability&gt;=Number(probability.value)) {\n                    var query = document.location.origin+'?uart='+maxEmotion;\n                    fetch(query)\n                      .then(response =&gt; {\n                        console.log(`request to ${query} finished, status: ${response.status}`)\n                      })              \n                  }\n                }\n                \n                res+= i+\",age,\"+Math.round(age)+\",gender,\"+gender+\",genderProbability,\"+Math.round(genderProbability)+\",emotion,\"+maxEmotion+\",neutral,\"+Math.round(expressions.neutral)+\",happy,\"+Math.round(expressions.happy)+\",sad,\"+Math.round(expressions.sad)+\",angry,\"+Math.round(expressions.angry)+\",fearful,\"+Math.round(expressions.fearful)+\",disgusted,\"+Math.round(expressions.disgusted)+\",surprised,\"+Math.round(expressions.surprised)+\",boxX,\"+Math.round(detection._box._x)+\",boxY,\"+Math.round(detection._box._y)+\",boxWidth,\"+Math.round(detection._box._width)+\",boxHeight,\"+Math.round(detection._box._height)+\"&lt;br&gt;\";\n                i++;        \n                new faceapi.draw.DrawTextField(\n                  [\n                    `${faceapi.round(age, 0)} years`,\n                    `${gender} (${faceapi.round(genderProbability)})`\n                  ],\n                  result.detection.box.bottomRight\n                ).draw(canvas)\n              })\n              \n              if (chkResult.checked) message.innerHTML = res;\n              aiStill.click();\n            }\n            \n            aiView.onload = function (event) {\n              try { \n                document.createEvent(\"TouchEvent\");\n                setTimeout(function(){DetectImage();},250);\n              } catch(e) { \n                setTimeout(function(){DetectImage();},150);\n              } \n            }\n            \n            //\u5b98\u65b9\u5f0f\u51fd\u5f0f\n            function start() {\n              var baseHost = 'http://'+document.getElementById(\"ip\").value;  //var baseHost = document.location.origin\n       \n              const hide = el =&gt; {\n                el.classList.add('hidden')\n              }\n              \n              const show = el =&gt; {\n                el.classList.remove('hidden')\n              }\n            \n              const disable = el =&gt; {\n                el.classList.add('disabled')\n                el.disabled = true\n              }\n            \n              const enable = el =&gt; {\n                el.classList.remove('disabled')\n                el.disabled = false\n              }\n            \n              const updateValue = (el, value, updateRemote) =&gt; {\n                updateRemote = updateRemote == null ? true : updateRemote\n                let initialValue\n                if(!el) return;\n                if (el.type === 'checkbox') {\n                  initialValue = el.checked\n                  value = !!value\n                  el.checked = value\n                } else {\n                  initialValue = el.value\n                  el.value = value\n                }\n            \n                if (updateRemote &amp;&amp; initialValue !== value) {\n                  updateConfig(el);\n                } \n              }\n            \n              function updateConfig (el) {\n                let value\n                switch (el.type) {\n                  case 'checkbox':\n                    value = el.checked ? 1 : 0\n                    break\n                  case 'range':\n                  case 'select-one':\n                    value = el.value\n                    break\n                  case 'button':\n                  case 'submit':\n                    value = '1'\n                    break\n                  default:\n                    return\n                }\n            \n                if (el.id ==\"flash\") {  //\u65b0\u589eflash\u81ea\u8a02\u6307\u4ee4\n                  var query = baseHost+\"?flash=\" + String(value);\n                } else if (el.id ==\"servo\") {  //\u65b0\u589eservo\u81ea\u8a02\u6307\u4ee4\n                  var query = baseHost+\"?servo=\" + pinServo.value + \";\" + String(value);\n                } else if (el.id ==\"relay\") {  //\u65b0\u589e\u7e7c\u96fb\u5668\u81ea\u8a02\u6307\u4ee4\n                  var query = baseHost+\"?relay=\" + pinRelay.value + \";\" + Number(relay.checked);\n                } else if (el.id ==\"uart\") {  //\u65b0\u589euart\u81ea\u8a02\u6307\u4ee4\n                  return;\n                } else if (el.id ==\"probability\") {  //\u65b0\u589eprobability\u81ea\u8a02\u6307\u4ee4\n                  return;                                          \n                } else {\n                  var query = `${baseHost}/?${el.id}=${value}`\n                }\n            \n                fetch(query)\n                  .then(response =&gt; {\n                    console.log(`request to ${query} finished, status: ${response.status}`)\n                  })\n              }\n            \n              document\n                .querySelectorAll('.close')\n                .forEach(el =&gt; {\n                  el.onclick = () =&gt; {\n                    hide(el.parentNode)\n                  }\n                })\n            \n              const view = document.getElementById('stream')\n              const viewContainer = document.getElementById('stream-container')\n              const stillButton = document.getElementById('get-still')\n              const enrollButton = document.getElementById('face_enroll')\n              const closeButton = document.getElementById('close-stream')\n              const stopButton = document.getElementById('stop-still')            //\u65b0\u589estopButton\u8b8a\u6578\n              const restartButton = document.getElementById('restart')            //\u65b0\u589erestart\u8b8a\u6578\n              const flash = document.getElementById('flash')                      //\u65b0\u589eflash\u8b8a\u6578\n              const servo = document.getElementById('servo')                      //\u65b0\u589eservo\u8b8a\u6578\n              const pinServo = document.getElementById('pinServo');               //\u65b0\u589eservo pin\u8b8a\u6578\n              const relay = document.getElementById('relay')                      //\u65b0\u589erelay\u8b8a\u6578\n              const pinRelay = document.getElementById('pinRelay');               //\u65b0\u589erelay pin\u8b8a\u6578          \n              const uart = document.getElementById('uart')                        //\u65b0\u589euart\u8b8a\u6578\n              var myTimer;\n              var restartCount=0;    \n              var streamState = false;\n              \n              stopButton.onclick = function (event) {   \n                window.stop();\n                message.innerHTML = \"\";\n              }    \n               \n              // Attach actions to buttons\n              stillButton.onclick = () =&gt; {\n                view.src = `${baseHost}/?getstill=${Date.now()}`\n                show(viewContainer);     \n              }\n              \n              closeButton.onclick = () =&gt; {\n                hide(viewContainer)\n              }\n              \n              //\u65b0\u589e\u91cd\u555f\u96fb\u6e90\u6309\u9215\u9ede\u9078\u4e8b\u4ef6 (\u81ea\u8a02\u6307\u4ee4\u683c\u5f0f\uff1ahttp://192.168.xxx.xxx/?cmd=P1;P2;P3;P4;P5;P6;P7;P8;P9)\n              restartButton.onclick = () =&gt; {\n                fetch(baseHost+\"/?restart\");\n              }    \n                    \n              // Attach default on change action\n              document\n                .querySelectorAll('.default-action')\n                .forEach(el =&gt; {\n                  el.onchange = () =&gt; updateConfig(el)\n                })\n            \n              framesize.onchange = () =&gt; {\n                updateConfig(framesize)\n              }\n              \n              // read initial values  \n              fetch(`${baseHost}/?status`)\n              .then(function (response) {\n                return response.json()\n              })\n              .then(function (state) {\n                document\n                .querySelectorAll('.default-action')\n                .forEach(el =&gt; {\n                  if (el.id==\"flash\") {  //\u65b0\u589eflash\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                    flash.value=0;\n                    var query = baseHost+\"?flash=0\";\n                    fetch(query)\n                      .then(response =&gt; {\n                        console.log(`request to ${query} finished, status: ${response.status}`)\n                      })\n                  } else if (el.id==\"servo\") {  //\u65b0\u589eservo\u8a2d\u5b9a\u9810\u8a2d\u503c90\u5ea6\n                    servo.value=90;\n                    /*\n                    var query = baseHost+\"?servo=\" + pinServo.value + \";90\";\n                    fetch(query)\n                      .then(response =&gt; {\n                        console.log(`request to ${query} finished, status: ${response.status}`)\n                      })\n                    */\n                  } else if (el.id==\"relay\") {  //\u65b0\u589erelay\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                    relay.checked = false;\n                    /*\n                    var query = baseHost+\"?relay=\" + pinRelay.value + \";0\";\n                    fetch(query)\n                      .then(response =&gt; {\n                        console.log(`request to ${query} finished, status: ${response.status}`)\n                      })\n                    */\n                  } else if (el.id==\"uart\") {  //\u65b0\u589euart\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                    uart.checked = false;\n                  } else if (el.id==\"probability\") {  //\u65b0\u589eprobability\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                    probability.value = 0;                                  \n                  } else {    \n                    updateValue(el, state[el.id], false)\n                  }\n                })\n              })\n            }\n            \n            //  \u7db2\u5740/?192.168.1.38  \u53ef\u81ea\u52d5\u5e36\u5165?\u5f8c\u53c3\u6578IP\u503c\n            var href=location.href;\n            if (href.indexOf(\"?\")!=-1) {\n              ip.value = location.search.split(\"?\")[1].replace(/http:\\/\\//g,\"\");\n              start();\n            }\n            else if (href.indexOf(\"http\")!=-1) {\n              ip.value = location.host;\n              start();\n            }\n              \n        &lt;/script&gt;        \n        &lt;/body&gt;\n    &lt;/html&gt;\n    )rawliteral\";\n    \n    //\u8a2d\u5b9a\u9078\u55ae\u521d\u59cb\u503c\u53d6\u56dejson\u683c\u5f0f\n    void status(){\n      //\u56de\u50b3\u8996\u8a0a\u72c0\u614b\n      sensor_t * s = esp_camera_sensor_get();\n      String json = \"{\";\n      json += \"\\\"framesize\\\":\"+String(s-&gt;status.framesize)+\",\";\n      json += \"\\\"quality\\\":\"+String(s-&gt;status.quality)+\",\";\n      json += \"\\\"brightness\\\":\"+String(s-&gt;status.brightness)+\",\";\n      json += \"\\\"contrast\\\":\"+String(s-&gt;status.contrast)+\",\";\n      json += \"\\\"saturation\\\":\"+String(s-&gt;status.saturation)+\",\";\n      json += \"\\\"special_effect\\\":\"+String(s-&gt;status.special_effect)+\",\";\n      json += \"\\\"vflip\\\":\"+String(s-&gt;status.vflip)+\",\";\n      json += \"\\\"hmirror\\\":\"+String(s-&gt;status.hmirror);\n      json += \"}\";\n      \n      client.println(\"HTTP/1.1 200 OK\");\n      client.println(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\");\n      client.println(\"Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS\");\n      client.println(\"Content-Type: application/json; charset=utf-8\");\n      client.println(\"Access-Control-Allow-Origin: *\");\n      client.println(\"Connection: close\");\n      client.println();\n      \n      for (int Index = 0; Index &lt; json.length(); Index = Index+1024) {\n        client.print(json.substring(Index, Index+1024));\n      }\n    }\n    \n    void mainpage() {\n      //\u56de\u50b3HTML\u9996\u9801\u6216Feedback\n      client.println(\"HTTP/1.1 200 OK\");\n      client.println(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\");\n      client.println(\"Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS\");\n      client.println(\"Content-Type: text/html; charset=utf-8\");\n      client.println(\"Access-Control-Allow-Origin: *\");\n      client.println(\"Connection: close\");\n      client.println();\n      \n      String Data=\"\";\n      if (cmd!=\"\")\n        Data = Feedback;\n      else\n        Data = String((const char *)INDEX_HTML);\n      \n      for (int Index = 0; Index &lt; Data.length(); Index = Index+1024) {\n        client.print(Data.substring(Index, Index+1024));\n      } \n    }\n    \n    void getStill() {\n      //\u56de\u50b3JPEG\u683c\u5f0f\u5f71\u50cf\n      camera_fb_t * fb = NULL;\n      fb = esp_camera_fb_get();  \n      if(!fb) {\n        Serial.println(\"Camera capture failed\");\n        delay(1000);\n        ESP.restart();\n      }\n    \n      client.println(\"HTTP/1.1 200 OK\");\n      client.println(\"Access-Control-Allow-Origin: *\");              \n      client.println(\"Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept\");\n      client.println(\"Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS\");\n      client.println(\"Content-Type: image/jpeg\");\n      client.println(\"Content-Disposition: form-data; name=\\\"imageFile\\\"; filename=\\\"picture.jpg\\\"\"); \n      client.println(\"Content-Length: \" + String(fb-&gt;len));             \n      client.println(\"Connection: close\");\n      client.println();\n      \n      uint8_t *fbBuf = fb-&gt;buf;\n      size_t fbLen = fb-&gt;len;\n      for (size_t n=0;n&lt;fbLen;n=n+1024) {\n        if (n+1024&lt;fbLen) {\n          client.write(fbBuf, 1024);\n          fbBuf += 1024;\n        }\n        else if (fbLen%1024&gt;0) {\n          size_t remainder = fbLen%1024;\n          client.write(fbBuf, remainder);\n        }\n      }  \n      esp_camera_fb_return(fb);\n    \n      pinMode(4, OUTPUT);\n      digitalWrite(4, LOW);              \n    }\n    \n    String sendCapturedImage2LineNotify(String token) {\n      camera_fb_t * fb = NULL;\n      fb = esp_camera_fb_get();  \n      if(!fb) {\n        Serial.println(\"Camera capture failed\");\n        delay(1000);\n        ESP.restart();\n        return \"Camera capture failed\";\n      }\n       \n      WiFiClientSecure client_tcp;\n      client_tcp.setInsecure();   //run version 1.0.5 or above\n      Serial.println(\"Connect to notify-api.line.me\");\n      if (client_tcp.connect(\"notify-api.line.me\", 443)) {\n        Serial.println(\"Connection successful\");\n        \n        String message = \"ESP32-CAM\";\n        String head = \"--Taiwan\\r\\nContent-Disposition: form-data; name=\\\"message\\\"; \\r\\n\\r\\n\" + message + \"\\r\\n--Taiwan\\r\\nContent-Disposition: form-data; name=\\\"imageFile\\\"; filename=\\\"esp32-cam.jpg\\\"\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n\";\n        String tail = \"\\r\\n--Taiwan--\\r\\n\";\n    \n        uint16_t imageLen = fb-&gt;len;\n        uint16_t extraLen = head.length() + tail.length();\n        uint16_t totalLen = imageLen + extraLen;\n      \n        client_tcp.println(\"POST /api/notify HTTP/1.1\");\n        client_tcp.println(\"Connection: close\"); \n        client_tcp.println(\"Host: notify-api.line.me\");\n        client_tcp.println(\"Authorization: Bearer \" + token);\n        client_tcp.println(\"Content-Length: \" + String(totalLen));\n        client_tcp.println(\"Content-Type: multipart/form-data; boundary=Taiwan\");\n        client_tcp.println();\n        client_tcp.print(head);\n        \n        uint8_t *fbBuf = fb-&gt;buf;\n        size_t fbLen = fb-&gt;len;\n        for (size_t n=0;n&lt;fbLen;n=n+1024) {\n          if (n+1024&lt;fbLen) {\n            client_tcp.write(fbBuf, 1024);\n            fbBuf += 1024;\n          }\n          else if (fbLen%1024&gt;0) {\n            size_t remainder = fbLen%1024;\n            client_tcp.write(fbBuf, remainder);\n          }\n        }  \n        \n        client_tcp.print(tail);\n        esp_camera_fb_return(fb);\n    \n        String getResponse=\"\",Feedback=\"\";\n        int waitTime = 10000;   // timeout 10 seconds\n        long startTime = millis();\n        boolean state = false;\n        \n        while ((startTime + waitTime) &gt; millis()) {\n          Serial.print(\".\");\n          delay(100);      \n          while (client_tcp.available())  {\n              char c = client_tcp.read();\n              if (state==true) Feedback += String(c);        \n              if (c == '\\n') {\n                if (getResponse.length()==0) state=true; \n                getResponse = \"\";\n              } \n              else if (c != '\\r')\n                getResponse += String(c);\n              startTime = millis();\n           }\n           if (Feedback.length()&gt;0) break;\n        }\n        Serial.println();\n        client_tcp.stop();\n        return Feedback;\n      }\n      else {\n        return \"Connected to notify-api.line.me failed.\";\n      }\n    }\n\n&amp;#x200B;",
  "author_fullname": "t2_vx59cjqb",
  "saved": false,
  "mod_reason_title": null,
  "gilded": 0,
  "clicked": false,
  "title": "esp32",
  "link_flair_richtext": [],
  "subreddit_name_prefixed": "r/Arduino_AI",
  "hidden": false,
  "pwls": null,
  "link_flair_css_class": null,
  "downs": 0,
  "thumbnail_height": null,
  "top_awarded_type": null,
  "hide_score": false,
  "name": "t3_1axg40i",
  "quarantine": false,
  "link_flair_text_color": "dark",
  "upvote_ratio": 0.66,
  "author_flair_background_color": null,
  "subreddit_type": "public",
  "ups": 1,
  "total_awards_received": 0,
  "media_embed": {},
  "thumbnail_width": null,
  "author_flair_template_id": null,
  "is_original_content": false,
  "user_reports": [],
  "secure_media": null,
  "is_reddit_media_domain": false,
  "is_meta": false,
  "category": null,
  "secure_media_embed": {},
  "link_flair_text": null,
  "can_mod_post": false,
  "score": 1,
  "approved_by": null,
  "is_created_from_ads_ui": false,
  "author_premium": false,
  "thumbnail": "self",
  "edited": false,
  "author_flair_css_class": null,
  "author_flair_richtext": [],
  "gildings": {},
  "content_categories": null,
  "is_self": true,
  "mod_note": null,
  "created": 1708632210.0,
  "link_flair_type": "text",
  "wls": null,
  "removed_by_category": null,
  "banned_by": null,
  "author_flair_type": "text",
  "domain": "self.Arduino_AI",
  "allow_live_comments": false,
  "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have this code that uses an ESP32-CAM for face recognition and when a smile is detected it takes a capture and sends it to my phone via Line notifications. I want to modify the code so that it sends a capture via Line when a face is detected. Can I have some help please? &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//Line Notify (Smile)\n    if (P1==&amp;quot;happy&amp;quot; || P1==&amp;quot;neutral&amp;quot; || P1==&amp;quot;sad&amp;quot; || P1==&amp;quot;angry&amp;quot; || P1==&amp;quot;fearful&amp;quot;  || P1==&amp;quot;disgusted&amp;quot;|| P1==&amp;quot;surprised&amp;quot;) {\n      Serial.println(&amp;quot;&amp;quot;);\n      sendCapturedImage2LineNotify(lineNotifyToken);\n    }\n  } else if (cmd==&amp;quot;resetwifi&amp;quot;) {  //\u91cd\u8a2d\u7db2\u8def\u9023\u7dda  \n    for (int i=0;i&amp;lt;2;i++) {\n      WiFi.begin(P1.c_str(), P2.c_str());\n      Serial.print(&amp;quot;Connecting to &amp;quot;);\n      Serial.println(P1);\n      long int StartTime=millis();\n      while (WiFi.status() != WL_CONNECTED) {\n          delay(500);\n          if ((StartTime+5000) &amp;lt; millis()) break;\n      } \n      Serial.println(&amp;quot;&amp;quot;);\n      Serial.println(&amp;quot;STAIP: &amp;quot;+WiFi.localIP().toString());\n      Feedback=&amp;quot;STAIP: &amp;quot;+WiFi.localIP().toString();\n\n      if (WiFi.status() == WL_CONNECTED) {\n        WiFi.softAP((WiFi.localIP().toString()+&amp;quot;_&amp;quot;+P1).c_str(), P2.c_str());\n        for (int i=0;i&amp;lt;2;i++) {    //\u82e5\u9023\u4e0d\u4e0aWIFI\u8a2d\u5b9a\u9583\u5149\u71c8\u6162\u901f\u9583\u720d\n          ledcWrite(4,10);\n          delay(300);\n          ledcWrite(4,0);\n          delay(300);    \n        }\n        break;\n      }\n    }\n  } else if (cmd==&amp;quot;framesize&amp;quot;) {\n    int val = P1.toInt();\n    sensor_t * s = esp_camera_sensor_get(); \n    s-&amp;gt;set_framesize(s, (framesize_t)val);    \n  } else if (cmd==&amp;quot;quality&amp;quot;) { //\u756b\u8cea\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_quality(s, P1.toInt());     \n  } else if (cmd==&amp;quot;contrast&amp;quot;) {  //\u5c0d\u6bd4\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_contrast(s, P1.toInt());          \n  } else if (cmd==&amp;quot;brightness&amp;quot;) {  //\u4eae\u5ea6\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_brightness(s, P1.toInt());   \n  } else if (cmd==&amp;quot;saturation&amp;quot;) {  //\u98fd\u548c\u5ea6\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_saturation(s, P1.toInt());          \n  } else if (cmd==&amp;quot;special_effect&amp;quot;) {  //\u7279\u6548\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_special_effect(s, P1.toInt());  \n  } else if (cmd==&amp;quot;hmirror&amp;quot;) {  //\u6c34\u5e73\u93e1\u50cf\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_hmirror(s, P1.toInt());  \n  } else if (cmd==&amp;quot;vflip&amp;quot;) {  //\u5782\u76f4\u7ffb\u8f49\n    sensor_t * s = esp_camera_sensor_get();\n    s-&amp;gt;set_vflip(s, P1.toInt());  \n  } else {\n    Feedback=&amp;quot;Command is not defined.&amp;quot;;\n  }\n  if (Feedback==&amp;quot;&amp;quot;) Feedback=Command;  \n}\n\n//\u62c6\u89e3\u547d\u4ee4\u5b57\u4e32\u7f6e\u5165\u8b8a\u6578\nvoid getCommand(char c)\n{\n  if (c==&amp;#39;?&amp;#39;) ReceiveState=1;\n  if ((c==&amp;#39; &amp;#39;)||(c==&amp;#39;\\r&amp;#39;)||(c==&amp;#39;\\n&amp;#39;)) ReceiveState=0;\n\n  if (ReceiveState==1)\n  {\n    Command=Command+String(c);\n\n    if (c==&amp;#39;=&amp;#39;) cmdState=0;\n    if (c==&amp;#39;;&amp;#39;) strState++;\n\n    if ((cmdState==1)&amp;amp;&amp;amp;((c!=&amp;#39;?&amp;#39;)||(questionstate==1))) cmd=cmd+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==1)&amp;amp;&amp;amp;((c!=&amp;#39;=&amp;#39;)||(equalstate==1))) P1=P1+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==2)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P2=P2+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==3)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P3=P3+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==4)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P4=P4+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==5)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P5=P5+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==6)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P6=P6+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==7)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P7=P7+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState==8)&amp;amp;&amp;amp;(c!=&amp;#39;;&amp;#39;)) P8=P8+String(c);\n    if ((cmdState==0)&amp;amp;&amp;amp;(strState&amp;gt;=9)&amp;amp;&amp;amp;((c!=&amp;#39;;&amp;#39;)||(semicolonstate==1))) P9=P9+String(c);\n        const aiView = document.getElementById(&amp;#39;stream&amp;#39;)\n        const aiStill = document.getElementById(&amp;#39;get-still&amp;#39;)\n        const canvas = document.getElementById(&amp;#39;canvas&amp;#39;)     \n        var context = canvas.getContext(&amp;quot;2d&amp;quot;);  \n        const message = document.getElementById(&amp;#39;message&amp;#39;);\n        const uart = document.getElementById(&amp;#39;uart&amp;#39;);\n        const chkResult = document.getElementById(&amp;#39;chkResult&amp;#39;);\n        const probability = document.getElementById(&amp;#39;probability&amp;#39;)\n        var res = &amp;quot;&amp;quot;;\n\n        //Model: https://github.com/fustyles/webduino/tree/master/TensorFlow/Face-api\n        const modelPath = &amp;#39;https://fustyles.github.io/webduino/TensorFlow/Face-api/&amp;#39;;\n        let currentStream;\n        let displaySize = { width:320, height: 240 }\n        let faceDetection;\n\n        Promise.all([\n          faceapi.nets.tinyFaceDetector.load(modelPath),\n          faceapi.nets.faceLandmark68TinyNet.load(modelPath),\n          faceapi.nets.faceRecognitionNet.load(modelPath),\n          faceapi.nets.faceExpressionNet.load(modelPath),\n          faceapi.nets.ageGenderNet.load(modelPath)          \n        ]).then(function(){\n          message.innerHTML = &amp;quot;&amp;quot;;\n          aiStill.click();\n        })  \n\n        async function DetectImage() {\n          canvas.setAttribute(&amp;quot;width&amp;quot;, aiView.width);\n          canvas.setAttribute(&amp;quot;height&amp;quot;, aiView.height);\n          context.drawImage(aiView, 0, 0, aiView.width, aiView.height); \n          if (!chkResult.checked) message.innerHTML = &amp;quot;&amp;quot;;\n\n          const detections = await faceapi.detectAllFaces(canvas, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks(true).withFaceExpressions().withAgeAndGender()\n          const resizedDetections = faceapi.resizeResults(detections, displaySize)\n          faceapi.draw.drawDetections(canvas, resizedDetections)\n          faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)\n          faceapi.draw.drawFaceExpressions(canvas, resizedDetections)\n          resizedDetections.forEach(result =&amp;gt; {\n            const { detection,expressions,gender,genderProbability,age } = result\n            //message.innerHTML = JSON.stringify(result);\n\n            res = &amp;quot;&amp;quot;;\n            var i=0;\n            var maxEmotion=&amp;quot;neutral&amp;quot;;\n            var maxProbability=expressions.neutral;\n            if (expressions.happy&amp;gt;maxProbability) {\n              maxProbability=expressions.happy;\n              maxEmotion=&amp;quot;happy&amp;quot;;\n            }\n            if (expressions.sad&amp;gt;maxProbability) {\n              maxProbability=expressions.sad;\n              maxEmotion=&amp;quot;sad&amp;quot;;\n            }\n            if (expressions.angry&amp;gt;maxProbability) {\n              maxProbability=expressions.angry;\n              maxEmotion=&amp;quot;angry&amp;quot;;\n            }\n            if (expressions.fearful&amp;gt;maxProbability) {\n              maxProbability=expressions.fearful;\n              maxEmotion=&amp;quot;fearful&amp;quot;;\n            }\n            if (expressions.disgusted&amp;gt;maxProbability) {\n              maxProbability=expressions.disgusted;\n              maxEmotion=&amp;quot;disgusted&amp;quot;;\n            }\n            if (expressions.surprised&amp;gt;maxProbability) {\n              maxProbability=expressions.surprised;\n              maxEmotion=&amp;quot;surprised&amp;quot;;\n            }\n\n            if (uart.checked) {\n              //\u7576\u53ef\u80fd\u6027\u6700\u5927\u7684\u8868\u60c5\u662fhappy\u6642\n              //if ((maxEmotion==&amp;quot;happy&amp;quot;||maxEmotion=&amp;quot;neutral&amp;quot;||maxEmotion=&amp;quot;sad&amp;quot; ||maxEmotion=&amp;quot;angry&amp;quot; ||maxEmotion=&amp;quot;fearful&amp;quot; ||maxEmotion=&amp;quot;disgusted&amp;quot; ||maxEmotion=&amp;quot;surprised&amp;quot;)&amp;amp;&amp;amp;maxProbability&amp;gt;=Number(probability.value)) {\n              if (maxEmotion==&amp;quot;happy&amp;quot; &amp;amp;&amp;amp;maxProbability&amp;gt;=Number(probability.value)) {\n                var query = document.location.origin+&amp;#39;?uart=&amp;#39;+maxEmotion;\n                fetch(query)\n                  .then(response =&amp;gt; {\n                    console.log(`request to ${query} finished, status: ${response.status}`)\n                  })              \n              }\n            }\n\n            res+= i+&amp;quot;,age,&amp;quot;+Math.round(age)+&amp;quot;,gender,&amp;quot;+gender+&amp;quot;,genderProbability,&amp;quot;+Math.round(genderProbability)+&amp;quot;,emotion,&amp;quot;+maxEmotion+&amp;quot;,neutral,&amp;quot;+Math.round(expressions.neutral)+&amp;quot;,happy,&amp;quot;+Math.round(expressions.happy)+&amp;quot;,sad,&amp;quot;+Math.round(expressions.sad)+&amp;quot;,angry,&amp;quot;+Math.round(expressions.angry)+&amp;quot;,fearful,&amp;quot;+Math.round(expressions.fearful)+&amp;quot;,disgusted,&amp;quot;+Math.round(expressions.disgusted)+&amp;quot;,surprised,&amp;quot;+Math.round(expressions.surprised)+&amp;quot;,boxX,&amp;quot;+Math.round(detection._box._x)+&amp;quot;,boxY,&amp;quot;+Math.round(detection._box._y)+&amp;quot;,boxWidth,&amp;quot;+Math.round(detection._box._width)+&amp;quot;,boxHeight,&amp;quot;+Math.round(detection._box._height)+&amp;quot;&amp;lt;br&amp;gt;&amp;quot;;\n            i++;        \n            new faceapi.draw.DrawTextField(\n              [\n                `${faceapi.round(age, 0)} years`,\n                `${gender} (${faceapi.round(genderProbability)})`\n              ],\n              result.detection.box.bottomRight\n            ).draw(canvas)\n          })\n\n          if (chkResult.checked) message.innerHTML = res;\n          aiStill.click();\n        }\n\n        aiView.onload = function (event) {\n          try { \n            document.createEvent(&amp;quot;TouchEvent&amp;quot;);\n            setTimeout(function(){DetectImage();},250);\n          } catch(e) { \n            setTimeout(function(){DetectImage();},150);\n          } \n        }\n\n        //\u5b98\u65b9\u5f0f\u51fd\u5f0f\n        function start() {\n          var baseHost = &amp;#39;http://&amp;#39;+document.getElementById(&amp;quot;ip&amp;quot;).value;  //var baseHost = document.location.origin\n\n          const hide = el =&amp;gt; {\n            el.classList.add(&amp;#39;hidden&amp;#39;)\n          }\n\n          const show = el =&amp;gt; {\n            el.classList.remove(&amp;#39;hidden&amp;#39;)\n          }\n\n          const disable = el =&amp;gt; {\n            el.classList.add(&amp;#39;disabled&amp;#39;)\n            el.disabled = true\n          }\n\n          const enable = el =&amp;gt; {\n            el.classList.remove(&amp;#39;disabled&amp;#39;)\n            el.disabled = false\n          }\n\n          const updateValue = (el, value, updateRemote) =&amp;gt; {\n            updateRemote = updateRemote == null ? true : updateRemote\n            let initialValue\n            if(!el) return;\n            if (el.type === &amp;#39;checkbox&amp;#39;) {\n              initialValue = el.checked\n              value = !!value\n              el.checked = value\n            } else {\n              initialValue = el.value\n              el.value = value\n            }\n\n            if (updateRemote &amp;amp;&amp;amp; initialValue !== value) {\n              updateConfig(el);\n            } \n          }\n\n          function updateConfig (el) {\n            let value\n            switch (el.type) {\n              case &amp;#39;checkbox&amp;#39;:\n                value = el.checked ? 1 : 0\n                break\n              case &amp;#39;range&amp;#39;:\n              case &amp;#39;select-one&amp;#39;:\n                value = el.value\n                break\n              case &amp;#39;button&amp;#39;:\n              case &amp;#39;submit&amp;#39;:\n                value = &amp;#39;1&amp;#39;\n                break\n              default:\n                return\n            }\n\n            if (el.id ==&amp;quot;flash&amp;quot;) {  //\u65b0\u589eflash\u81ea\u8a02\u6307\u4ee4\n              var query = baseHost+&amp;quot;?flash=&amp;quot; + String(value);\n            } else if (el.id ==&amp;quot;servo&amp;quot;) {  //\u65b0\u589eservo\u81ea\u8a02\u6307\u4ee4\n              var query = baseHost+&amp;quot;?servo=&amp;quot; + pinServo.value + &amp;quot;;&amp;quot; + String(value);\n            } else if (el.id ==&amp;quot;relay&amp;quot;) {  //\u65b0\u589e\u7e7c\u96fb\u5668\u81ea\u8a02\u6307\u4ee4\n              var query = baseHost+&amp;quot;?relay=&amp;quot; + pinRelay.value + &amp;quot;;&amp;quot; + Number(relay.checked);\n            } else if (el.id ==&amp;quot;uart&amp;quot;) {  //\u65b0\u589euart\u81ea\u8a02\u6307\u4ee4\n              return;\n            } else if (el.id ==&amp;quot;probability&amp;quot;) {  //\u65b0\u589eprobability\u81ea\u8a02\u6307\u4ee4\n              return;                                          \n            } else {\n              var query = `${baseHost}/?${el.id}=${value}`\n            }\n\n            fetch(query)\n              .then(response =&amp;gt; {\n                console.log(`request to ${query} finished, status: ${response.status}`)\n              })\n          }\n\n          document\n            .querySelectorAll(&amp;#39;.close&amp;#39;)\n            .forEach(el =&amp;gt; {\n              el.onclick = () =&amp;gt; {\n                hide(el.parentNode)\n              }\n            })\n\n          const view = document.getElementById(&amp;#39;stream&amp;#39;)\n          const viewContainer = document.getElementById(&amp;#39;stream-container&amp;#39;)\n          const stillButton = document.getElementById(&amp;#39;get-still&amp;#39;)\n          const enrollButton = document.getElementById(&amp;#39;face_enroll&amp;#39;)\n          const closeButton = document.getElementById(&amp;#39;close-stream&amp;#39;)\n          const stopButton = document.getElementById(&amp;#39;stop-still&amp;#39;)            //\u65b0\u589estopButton\u8b8a\u6578\n          const restartButton = document.getElementById(&amp;#39;restart&amp;#39;)            //\u65b0\u589erestart\u8b8a\u6578\n          const flash = document.getElementById(&amp;#39;flash&amp;#39;)                      //\u65b0\u589eflash\u8b8a\u6578\n          const servo = document.getElementById(&amp;#39;servo&amp;#39;)                      //\u65b0\u589eservo\u8b8a\u6578\n          const pinServo = document.getElementById(&amp;#39;pinServo&amp;#39;);               //\u65b0\u589eservo pin\u8b8a\u6578\n          const relay = document.getElementById(&amp;#39;relay&amp;#39;)                      //\u65b0\u589erelay\u8b8a\u6578\n          const pinRelay = document.getElementById(&amp;#39;pinRelay&amp;#39;);               //\u65b0\u589erelay pin\u8b8a\u6578          \n          const uart = document.getElementById(&amp;#39;uart&amp;#39;)                        //\u65b0\u589euart\u8b8a\u6578\n          var myTimer;\n          var restartCount=0;    \n          var streamState = false;\n\n          stopButton.onclick = function (event) {   \n            window.stop();\n            message.innerHTML = &amp;quot;&amp;quot;;\n          }    \n\n          // Attach actions to buttons\n          stillButton.onclick = () =&amp;gt; {\n            view.src = `${baseHost}/?getstill=${Date.now()}`\n            show(viewContainer);     \n          }\n\n          closeButton.onclick = () =&amp;gt; {\n            hide(viewContainer)\n          }\n\n          //\u65b0\u589e\u91cd\u555f\u96fb\u6e90\u6309\u9215\u9ede\u9078\u4e8b\u4ef6 (\u81ea\u8a02\u6307\u4ee4\u683c\u5f0f\uff1ahttp://192.168.xxx.xxx/?cmd=P1;P2;P3;P4;P5;P6;P7;P8;P9)\n          restartButton.onclick = () =&amp;gt; {\n            fetch(baseHost+&amp;quot;/?restart&amp;quot;);\n          }    \n\n          // Attach default on change action\n          document\n            .querySelectorAll(&amp;#39;.default-action&amp;#39;)\n            .forEach(el =&amp;gt; {\n              el.onchange = () =&amp;gt; updateConfig(el)\n            })\n\n          framesize.onchange = () =&amp;gt; {\n            updateConfig(framesize)\n          }\n\n          // read initial values  \n          fetch(`${baseHost}/?status`)\n          .then(function (response) {\n            return response.json()\n          })\n          .then(function (state) {\n            document\n            .querySelectorAll(&amp;#39;.default-action&amp;#39;)\n            .forEach(el =&amp;gt; {\n              if (el.id==&amp;quot;flash&amp;quot;) {  //\u65b0\u589eflash\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                flash.value=0;\n                var query = baseHost+&amp;quot;?flash=0&amp;quot;;\n                fetch(query)\n                  .then(response =&amp;gt; {\n                    console.log(`request to ${query} finished, status: ${response.status}`)\n                  })\n              } else if (el.id==&amp;quot;servo&amp;quot;) {  //\u65b0\u589eservo\u8a2d\u5b9a\u9810\u8a2d\u503c90\u5ea6\n                servo.value=90;\n                /*\n                var query = baseHost+&amp;quot;?servo=&amp;quot; + pinServo.value + &amp;quot;;90&amp;quot;;\n                fetch(query)\n                  .then(response =&amp;gt; {\n                    console.log(`request to ${query} finished, status: ${response.status}`)\n                  })\n                */\n              } else if (el.id==&amp;quot;relay&amp;quot;) {  //\u65b0\u589erelay\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                relay.checked = false;\n                /*\n                var query = baseHost+&amp;quot;?relay=&amp;quot; + pinRelay.value + &amp;quot;;0&amp;quot;;\n                fetch(query)\n                  .then(response =&amp;gt; {\n                    console.log(`request to ${query} finished, status: ${response.status}`)\n                  })\n                */\n              } else if (el.id==&amp;quot;uart&amp;quot;) {  //\u65b0\u589euart\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                uart.checked = false;\n              } else if (el.id==&amp;quot;probability&amp;quot;) {  //\u65b0\u589eprobability\u8a2d\u5b9a\u9810\u8a2d\u503c0\n                probability.value = 0;                                  \n              } else {    \n                updateValue(el, state[el.id], false)\n              }\n            })\n          })\n        }\n\n        //  \u7db2\u5740/?192.168.1.38  \u53ef\u81ea\u52d5\u5e36\u5165?\u5f8c\u53c3\u6578IP\u503c\n        var href=location.href;\n        if (href.indexOf(&amp;quot;?&amp;quot;)!=-1) {\n          ip.value = location.search.split(&amp;quot;?&amp;quot;)[1].replace(/http:\\/\\//g,&amp;quot;&amp;quot;);\n          start();\n        }\n        else if (href.indexOf(&amp;quot;http&amp;quot;)!=-1) {\n          ip.value = location.host;\n          start();\n        }\n\n    &amp;lt;/script&amp;gt;        \n    &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n)rawliteral&amp;quot;;\n\n//\u8a2d\u5b9a\u9078\u55ae\u521d\u59cb\u503c\u53d6\u56dejson\u683c\u5f0f\nvoid status(){\n  //\u56de\u50b3\u8996\u8a0a\u72c0\u614b\n  sensor_t * s = esp_camera_sensor_get();\n  String json = &amp;quot;{&amp;quot;;\n  json += &amp;quot;\\&amp;quot;framesize\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.framesize)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;quality\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.quality)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;brightness\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.brightness)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;contrast\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.contrast)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;saturation\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.saturation)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;special_effect\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.special_effect)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;vflip\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.vflip)+&amp;quot;,&amp;quot;;\n  json += &amp;quot;\\&amp;quot;hmirror\\&amp;quot;:&amp;quot;+String(s-&amp;gt;status.hmirror);\n  json += &amp;quot;}&amp;quot;;\n\n  client.println(&amp;quot;HTTP/1.1 200 OK&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS&amp;quot;);\n  client.println(&amp;quot;Content-Type: application/json; charset=utf-8&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Origin: *&amp;quot;);\n  client.println(&amp;quot;Connection: close&amp;quot;);\n  client.println();\n\n  for (int Index = 0; Index &amp;lt; json.length(); Index = Index+1024) {\n    client.print(json.substring(Index, Index+1024));\n  }\n}\n\nvoid mainpage() {\n  //\u56de\u50b3HTML\u9996\u9801\u6216Feedback\n  client.println(&amp;quot;HTTP/1.1 200 OK&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS&amp;quot;);\n  client.println(&amp;quot;Content-Type: text/html; charset=utf-8&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Origin: *&amp;quot;);\n  client.println(&amp;quot;Connection: close&amp;quot;);\n  client.println();\n\n  String Data=&amp;quot;&amp;quot;;\n  if (cmd!=&amp;quot;&amp;quot;)\n    Data = Feedback;\n  else\n    Data = String((const char *)INDEX_HTML);\n\n  for (int Index = 0; Index &amp;lt; Data.length(); Index = Index+1024) {\n    client.print(Data.substring(Index, Index+1024));\n  } \n}\n\nvoid getStill() {\n  //\u56de\u50b3JPEG\u683c\u5f0f\u5f71\u50cf\n  camera_fb_t * fb = NULL;\n  fb = esp_camera_fb_get();  \n  if(!fb) {\n    Serial.println(&amp;quot;Camera capture failed&amp;quot;);\n    delay(1000);\n    ESP.restart();\n  }\n\n  client.println(&amp;quot;HTTP/1.1 200 OK&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Origin: *&amp;quot;);              \n  client.println(&amp;quot;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;quot;);\n  client.println(&amp;quot;Access-Control-Allow-Methods: GET,POST,PUT,DELETE,OPTIONS&amp;quot;);\n  client.println(&amp;quot;Content-Type: image/jpeg&amp;quot;);\n  client.println(&amp;quot;Content-Disposition: form-data; name=\\&amp;quot;imageFile\\&amp;quot;; filename=\\&amp;quot;picture.jpg\\&amp;quot;&amp;quot;); \n  client.println(&amp;quot;Content-Length: &amp;quot; + String(fb-&amp;gt;len));             \n  client.println(&amp;quot;Connection: close&amp;quot;);\n  client.println();\n\n  uint8_t *fbBuf = fb-&amp;gt;buf;\n  size_t fbLen = fb-&amp;gt;len;\n  for (size_t n=0;n&amp;lt;fbLen;n=n+1024) {\n    if (n+1024&amp;lt;fbLen) {\n      client.write(fbBuf, 1024);\n      fbBuf += 1024;\n    }\n    else if (fbLen%1024&amp;gt;0) {\n      size_t remainder = fbLen%1024;\n      client.write(fbBuf, remainder);\n    }\n  }  \n  esp_camera_fb_return(fb);\n\n  pinMode(4, OUTPUT);\n  digitalWrite(4, LOW);              \n}\n\nString sendCapturedImage2LineNotify(String token) {\n  camera_fb_t * fb = NULL;\n  fb = esp_camera_fb_get();  \n  if(!fb) {\n    Serial.println(&amp;quot;Camera capture failed&amp;quot;);\n    delay(1000);\n    ESP.restart();\n    return &amp;quot;Camera capture failed&amp;quot;;\n  }\n\n  WiFiClientSecure client_tcp;\n  client_tcp.setInsecure();   //run version 1.0.5 or above\n  Serial.println(&amp;quot;Connect to notify-api.line.me&amp;quot;);\n  if (client_tcp.connect(&amp;quot;notify-api.line.me&amp;quot;, 443)) {\n    Serial.println(&amp;quot;Connection successful&amp;quot;);\n\n    String message = &amp;quot;ESP32-CAM&amp;quot;;\n    String head = &amp;quot;--Taiwan\\r\\nContent-Disposition: form-data; name=\\&amp;quot;message\\&amp;quot;; \\r\\n\\r\\n&amp;quot; + message + &amp;quot;\\r\\n--Taiwan\\r\\nContent-Disposition: form-data; name=\\&amp;quot;imageFile\\&amp;quot;; filename=\\&amp;quot;esp32-cam.jpg\\&amp;quot;\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n&amp;quot;;\n    String tail = &amp;quot;\\r\\n--Taiwan--\\r\\n&amp;quot;;\n\n    uint16_t imageLen = fb-&amp;gt;len;\n    uint16_t extraLen = head.length() + tail.length();\n    uint16_t totalLen = imageLen + extraLen;\n\n    client_tcp.println(&amp;quot;POST /api/notify HTTP/1.1&amp;quot;);\n    client_tcp.println(&amp;quot;Connection: close&amp;quot;); \n    client_tcp.println(&amp;quot;Host: notify-api.line.me&amp;quot;);\n    client_tcp.println(&amp;quot;Authorization: Bearer &amp;quot; + token);\n    client_tcp.println(&amp;quot;Content-Length: &amp;quot; + String(totalLen));\n    client_tcp.println(&amp;quot;Content-Type: multipart/form-data; boundary=Taiwan&amp;quot;);\n    client_tcp.println();\n    client_tcp.print(head);\n\n    uint8_t *fbBuf = fb-&amp;gt;buf;\n    size_t fbLen = fb-&amp;gt;len;\n    for (size_t n=0;n&amp;lt;fbLen;n=n+1024) {\n      if (n+1024&amp;lt;fbLen) {\n        client_tcp.write(fbBuf, 1024);\n        fbBuf += 1024;\n      }\n      else if (fbLen%1024&amp;gt;0) {\n        size_t remainder = fbLen%1024;\n        client_tcp.write(fbBuf, remainder);\n      }\n    }  \n\n    client_tcp.print(tail);\n    esp_camera_fb_return(fb);\n\n    String getResponse=&amp;quot;&amp;quot;,Feedback=&amp;quot;&amp;quot;;\n    int waitTime = 10000;   // timeout 10 seconds\n    long startTime = millis();\n    boolean state = false;\n\n    while ((startTime + waitTime) &amp;gt; millis()) {\n      Serial.print(&amp;quot;.&amp;quot;);\n      delay(100);      \n      while (client_tcp.available())  {\n          char c = client_tcp.read();\n          if (state==true) Feedback += String(c);        \n          if (c == &amp;#39;\\n&amp;#39;) {\n            if (getResponse.length()==0) state=true; \n            getResponse = &amp;quot;&amp;quot;;\n          } \n          else if (c != &amp;#39;\\r&amp;#39;)\n            getResponse += String(c);\n          startTime = millis();\n       }\n       if (Feedback.length()&amp;gt;0) break;\n    }\n    Serial.println();\n    client_tcp.stop();\n    return Feedback;\n  }\n  else {\n    return &amp;quot;Connected to notify-api.line.me failed.&amp;quot;;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
  "likes": null,
  "suggested_sort": null,
  "banned_at_utc": null,
  "view_count": null,
  "archived": false,
  "no_follow": true,
  "is_crosspostable": false,
  "pinned": false,
  "over_18": false,
  "all_awardings": [],
  "awarders": [],
  "media_only": false,
  "can_gild": false,
  "spoiler": false,
  "locked": false,
  "author_flair_text": null,
  "treatment_tags": [],
  "visited": false,
  "removed_by": null,
  "num_reports": null,
  "distinguished": null,
  "subreddit_id": "t5_7yd5re",
  "author_is_blocked": false,
  "mod_reason_by": null,
  "removal_reason": null,
  "link_flair_background_color": "",
  "id": "1axg40i",
  "is_robot_indexable": true,
  "report_reasons": null,
  "author": "wwwhatisthisss",
  "discussion_type": null,
  "num_comments": 2,
  "send_replies": true,
  "contest_mode": false,
  "mod_reports": [],
  "author_patreon_flair": false,
  "author_flair_text_color": null,
  "permalink": "/r/Arduino_AI/comments/1axg40i/esp32/",
  "stickied": false,
  "url": "https://www.reddit.com/r/Arduino_AI/comments/1axg40i/esp32/",
  "subreddit_subscribers": 3137,
  "created_utc": 1708632210.0,
  "num_crossposts": 0,
  "media": null,
  "is_video": false
}